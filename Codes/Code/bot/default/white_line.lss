
white_line.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800200  000027d4  00002868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800318  00800318  00002980  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000564  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cff  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000324  00000000  00000000  00004c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001856  00000000  00000000  00004f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00006780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000592  00000000  00000000  00006ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000907  00000000  00000000  00007062  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00007969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_5>
      18:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <init_devices+0x3e>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e4 ed       	ldi	r30, 0xD4	; 212
     17e:	f7 e2       	ldi	r31, 0x27	; 39
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 31       	cpi	r26, 0x18	; 24
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e1       	ldi	r26, 0x18	; 24
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a0 37       	cpi	r26, 0x70	; 112
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <main>
     1a4:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ac:	8c ec       	ldi	r24, 0xCC	; 204
     1ae:	9a e0       	ldi	r25, 0x0A	; 10
     1b0:	fc 01       	movw	r30, r24
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	40 e3       	ldi	r20, 0x30	; 48
     1bc:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	36 e3       	ldi	r19, 0x36	; 54
     1c4:	f9 01       	movw	r30, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ca:	42 98       	cbi	0x08, 2	; 8
     1cc:	fc 01       	movw	r30, r24
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1d4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1d6:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1d8:	42 9a       	sbi	0x08, 2	; 8
     1da:	f9 01       	movw	r30, r18
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1e0:	42 98       	cbi	0x08, 2	; 8
     1e2:	fc 01       	movw	r30, r24
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1e8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ea:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ec:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ee:	42 9a       	sbi	0x08, 2	; 8
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1f6:	42 98       	cbi	0x08, 2	; 8
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1fc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fe:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	c9 01       	movw	r24, r18
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8

	
}
     20e:	08 95       	ret

00000210 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     210:	98 b1       	in	r25, 0x08	; 8
     212:	9f 70       	andi	r25, 0x0F	; 15
     214:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     216:	28 b1       	in	r18, 0x08	; 8
     218:	98 2f       	mov	r25, r24
     21a:	90 7f       	andi	r25, 0xF0	; 240
     21c:	92 2b       	or	r25, r18
     21e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     220:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     222:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     224:	42 9a       	sbi	0x08, 2	; 8
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	36 e3       	ldi	r19, 0x36	; 54
     22a:	f9 01       	movw	r30, r18
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     230:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     238:	98 b1       	in	r25, 0x08	; 8
     23a:	82 95       	swap	r24
     23c:	80 7f       	andi	r24, 0xF0	; 240
     23e:	98 2b       	or	r25, r24
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	c9 01       	movw	r24, r18
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     24e:	42 98       	cbi	0x08, 2	; 8
}
     250:	08 95       	ret

00000252 <lcd_init>:
     252:	8c ec       	ldi	r24, 0xCC	; 204
     254:	9a e0       	ldi	r25, 0x0A	; 10
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     25a:	88 e2       	ldi	r24, 0x28	; 40
     25c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x01);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x06);
     266:	86 e0       	ldi	r24, 0x06	; 6
     268:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x0E);
     26c:	8e e0       	ldi	r24, 0x0E	; 14
     26e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x80);
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
}
     278:	08 95       	ret

0000027a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     27a:	98 b1       	in	r25, 0x08	; 8
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     280:	28 b1       	in	r18, 0x08	; 8
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	92 2b       	or	r25, r18
     288:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     28a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     28c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     28e:	42 9a       	sbi	0x08, 2	; 8
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	36 e3       	ldi	r19, 0x36	; 54
     294:	f9 01       	movw	r30, r18
     296:	31 97       	sbiw	r30, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     29a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     29c:	98 b1       	in	r25, 0x08	; 8
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2a2:	98 b1       	in	r25, 0x08	; 8
     2a4:	82 95       	swap	r24
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	98 2b       	or	r25, r24
     2aa:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ac:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ae:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2b0:	42 9a       	sbi	0x08, 2	; 8
     2b2:	c9 01       	movw	r24, r18
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     2b8:	42 98       	cbi	0x08, 2	; 8
}
     2ba:	08 95       	ret

000002bc <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     2bc:	80 e8       	ldi	r24, 0x80	; 128
     2be:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
}
     2c2:	08 95       	ret

000002c4 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
		str++;
     2d0:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     2d2:	88 81       	ld	r24, Y
     2d4:	88 23       	and	r24, r24
     2d6:	d1 f7       	brne	.-12     	; 0x2cc <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	69 f0       	breq	.+26     	; 0x2fc <lcd_cursor+0x1e>
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <lcd_cursor+0xe>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	a9 f4       	brne	.+42     	; 0x314 <lcd_cursor+0x36>
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <lcd_cursor+0x18>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	49 f0       	breq	.+18     	; 0x302 <lcd_cursor+0x24>
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	81 f4       	brne	.+32     	; 0x314 <lcd_cursor+0x36>
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2f6:	86 2f       	mov	r24, r22
     2f8:	81 58       	subi	r24, 0x81	; 129
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2fc:	86 2f       	mov	r24, r22
     2fe:	81 54       	subi	r24, 0x41	; 65
     300:	02 c0       	rjmp	.+4      	; 0x306 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     302:	86 2f       	mov	r24, r22
     304:	8d 56       	subi	r24, 0x6D	; 109
     306:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     30a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     30c:	86 2f       	mov	r24, r22
     30e:	8d 52       	subi	r24, 0x2D	; 45
     310:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     314:	08 95       	ret

00000316 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	8a 01       	movw	r16, r20
     320:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     322:	88 23       	and	r24, r24
     324:	11 f0       	breq	.+4      	; 0x32a <lcd_print+0x14>
     326:	66 23       	and	r22, r22
     328:	19 f4       	brne	.+6      	; 0x330 <lcd_print+0x1a>
	{
		lcd_home();
     32a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_home>
     32e:	02 c0       	rjmp	.+4      	; 0x334 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     330:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_cursor>
	}
	if(digits==5 || flag==1)
     334:	c5 30       	cpi	r28, 0x05	; 5
     336:	d1 05       	cpc	r29, r1
     338:	71 f4       	brne	.+28     	; 0x356 <lcd_print+0x40>
	{
		million=value/10000+48;
     33a:	c8 01       	movw	r24, r16
     33c:	60 e1       	ldi	r22, 0x10	; 16
     33e:	77 e2       	ldi	r23, 0x27	; 39
     340:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     344:	cb 01       	movw	r24, r22
     346:	c0 96       	adiw	r24, 0x30	; 48
     348:	90 93 41 03 	sts	0x0341, r25
     34c:	80 93 40 03 	sts	0x0340, r24
		lcd_wr_char(million);
     350:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     354:	05 c0       	rjmp	.+10     	; 0x360 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     356:	c4 30       	cpi	r28, 0x04	; 4
     358:	d1 05       	cpc	r29, r1
     35a:	11 f0       	breq	.+4      	; 0x360 <lcd_print+0x4a>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	16 c0       	rjmp	.+44     	; 0x38c <lcd_print+0x76>
	{
		temp = value/1000;
     360:	c8 01       	movw	r24, r16
     362:	68 ee       	ldi	r22, 0xE8	; 232
     364:	73 e0       	ldi	r23, 0x03	; 3
     366:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     36a:	cb 01       	movw	r24, r22
     36c:	60 93 49 03 	sts	0x0349, r22
     370:	90 93 4a 03 	sts	0x034A, r25
		thousand = temp%10 + 48;
     374:	6a e0       	ldi	r22, 0x0A	; 10
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     37c:	c0 96       	adiw	r24, 0x30	; 48
     37e:	90 93 6d 03 	sts	0x036D, r25
     382:	80 93 6c 03 	sts	0x036C, r24
		lcd_wr_char(thousand);
     386:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     38a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     38c:	c3 30       	cpi	r28, 0x03	; 3
     38e:	d1 05       	cpc	r29, r1
     390:	21 f0       	breq	.+8      	; 0x39a <lcd_print+0x84>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	11 f0       	breq	.+4      	; 0x39a <lcd_print+0x84>
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	16 c0       	rjmp	.+44     	; 0x3c6 <lcd_print+0xb0>
	{
		temp = value/100;
     39a:	c8 01       	movw	r24, r16
     39c:	64 e6       	ldi	r22, 0x64	; 100
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     3a4:	cb 01       	movw	r24, r22
     3a6:	60 93 49 03 	sts	0x0349, r22
     3aa:	90 93 4a 03 	sts	0x034A, r25
		hundred = temp%10 + 48;
     3ae:	6a e0       	ldi	r22, 0x0A	; 10
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     3b6:	c0 96       	adiw	r24, 0x30	; 48
     3b8:	90 93 68 03 	sts	0x0368, r25
     3bc:	80 93 67 03 	sts	0x0367, r24
		lcd_wr_char(hundred);
     3c0:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     3c6:	c2 30       	cpi	r28, 0x02	; 2
     3c8:	d1 05       	cpc	r29, r1
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <lcd_print+0xbe>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	11 f0       	breq	.+4      	; 0x3d4 <lcd_print+0xbe>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	16 c0       	rjmp	.+44     	; 0x400 <lcd_print+0xea>
	{
		temp = value/10;
     3d4:	c8 01       	movw	r24, r16
     3d6:	6a e0       	ldi	r22, 0x0A	; 10
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     3de:	cb 01       	movw	r24, r22
     3e0:	60 93 49 03 	sts	0x0349, r22
     3e4:	90 93 4a 03 	sts	0x034A, r25
		tens = temp%10 + 48;
     3e8:	6a e0       	ldi	r22, 0x0A	; 10
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     3f0:	c0 96       	adiw	r24, 0x30	; 48
     3f2:	90 93 60 03 	sts	0x0360, r25
     3f6:	80 93 5f 03 	sts	0x035F, r24
		lcd_wr_char(tens);
     3fa:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     400:	c1 30       	cpi	r28, 0x01	; 1
     402:	d1 05       	cpc	r29, r1
     404:	11 f0       	breq	.+4      	; 0x40a <lcd_print+0xf4>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	61 f4       	brne	.+24     	; 0x422 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     40a:	c8 01       	movw	r24, r16
     40c:	6a e0       	ldi	r22, 0x0A	; 10
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     414:	c0 96       	adiw	r24, 0x30	; 48
     416:	90 93 6b 03 	sts	0x036B, r25
     41a:	80 93 6a 03 	sts	0x036A, r24
		lcd_wr_char(unit);
     41e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	if(digits>5)
     422:	26 97       	sbiw	r28, 0x06	; 6
     424:	1c f0       	brlt	.+6      	; 0x42c <lcd_print+0x116>
	{
		lcd_wr_char('E');
     426:	85 e4       	ldi	r24, 0x45	; 69
     428:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <LCD_port_config>:
		

// To configure the lcd ports
void LCD_port_config( void){

	DDRC = DDRC | 0xF7;
     436:	87 b1       	in	r24, 0x07	; 7
     438:	87 6f       	ori	r24, 0xF7	; 247
     43a:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80;
     43c:	88 b1       	in	r24, 0x08	; 8
     43e:	80 78       	andi	r24, 0x80	; 128
     440:	88 b9       	out	0x08, r24	; 8
}
     442:	08 95       	ret

00000444 <adc_pin_config>:


// To configure the pins 
void adc_pin_config(void){
	
	DDRF = 0x00;
     444:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     446:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     448:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     44c:	10 92 08 01 	sts	0x0108, r1
}
     450:	08 95       	ret

00000452 <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     452:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     454:	74 9a       	sbi	0x0e, 4	; 14
}
     456:	08 95       	ret

00000458 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     458:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     45a:	75 9a       	sbi	0x0e, 5	; 14
}
     45c:	08 95       	ret

0000045e <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     45e:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     460:	ea e6       	ldi	r30, 0x6A	; 106
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	82 60       	ori	r24, 0x02	; 2
     468:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     46a:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     46c:	78 94       	sei
}
     46e:	08 95       	ret

00000470 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     470:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     472:	ea e6       	ldi	r30, 0x6A	; 106
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	88 60       	ori	r24, 0x08	; 8
     47a:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     47c:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     47e:	78 94       	sei
}
     480:	08 95       	ret

00000482 <__vector_6>:


//ISR for right position encoder
ISR(INT5_vect)  
{
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	af 93       	push	r26
     492:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     494:	80 91 1c 03 	lds	r24, 0x031C
     498:	90 91 1d 03 	lds	r25, 0x031D
     49c:	a0 91 1e 03 	lds	r26, 0x031E
     4a0:	b0 91 1f 03 	lds	r27, 0x031F
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	a1 1d       	adc	r26, r1
     4a8:	b1 1d       	adc	r27, r1
     4aa:	80 93 1c 03 	sts	0x031C, r24
     4ae:	90 93 1d 03 	sts	0x031D, r25
     4b2:	a0 93 1e 03 	sts	0x031E, r26
     4b6:	b0 93 1f 03 	sts	0x031F, r27
}
     4ba:	bf 91       	pop	r27
     4bc:	af 91       	pop	r26
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_5>:


//SR for left position encoder
ISR(INT4_vect)
{
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     4de:	80 91 18 03 	lds	r24, 0x0318
     4e2:	90 91 19 03 	lds	r25, 0x0319
     4e6:	a0 91 1a 03 	lds	r26, 0x031A
     4ea:	b0 91 1b 03 	lds	r27, 0x031B
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	a1 1d       	adc	r26, r1
     4f2:	b1 1d       	adc	r27, r1
     4f4:	80 93 18 03 	sts	0x0318, r24
     4f8:	90 93 19 03 	sts	0x0319, r25
     4fc:	a0 93 1a 03 	sts	0x031A, r26
     500:	b0 93 1b 03 	sts	0x031B, r27
}
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <motion_pin_config>:


void motion_pin_config() {
	DDRA = DDRA | 0x0F;
     516:	81 b1       	in	r24, 0x01	; 1
     518:	8f 60       	ori	r24, 0x0F	; 15
     51a:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; 
     51c:	82 b1       	in	r24, 0x02	; 2
     51e:	80 7f       	andi	r24, 0xF0	; 240
     520:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;
     522:	ea e0       	ldi	r30, 0x0A	; 10
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	80 81       	ld	r24, Z
     528:	88 61       	ori	r24, 0x18	; 24
     52a:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18;
     52c:	eb e0       	ldi	r30, 0x0B	; 11
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	80 81       	ld	r24, Z
     532:	88 61       	ori	r24, 0x18	; 24
     534:	80 83       	st	Z, r24

}
     536:	08 95       	ret

00000538 <port_init>:
		

// To configure the lcd ports
void LCD_port_config( void){

	DDRC = DDRC | 0xF7;
     538:	87 b1       	in	r24, 0x07	; 7
     53a:	87 6f       	ori	r24, 0xF7	; 247
     53c:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80;
     53e:	88 b1       	in	r24, 0x08	; 8
     540:	80 78       	andi	r24, 0x80	; 128
     542:	88 b9       	out	0x08, r24	; 8


// To configure the pins 
void adc_pin_config(void){
	
	DDRF = 0x00;
     544:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     546:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     548:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     54c:	10 92 08 01 	sts	0x0108, r1
 ShaftCountLeft++;  //increment left shaft position count
}


void motion_pin_config() {
	DDRA = DDRA | 0x0F;
     550:	81 b1       	in	r24, 0x01	; 1
     552:	8f 60       	ori	r24, 0x0F	; 15
     554:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; 
     556:	82 b1       	in	r24, 0x02	; 2
     558:	80 7f       	andi	r24, 0xF0	; 240
     55a:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;
     55c:	ea e0       	ldi	r30, 0x0A	; 10
     55e:	f1 e0       	ldi	r31, 0x01	; 1
     560:	80 81       	ld	r24, Z
     562:	88 61       	ori	r24, 0x18	; 24
     564:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18;
     566:	eb e0       	ldi	r30, 0x0B	; 11
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	80 81       	ld	r24, Z
     56c:	88 61       	ori	r24, 0x18	; 24
     56e:	80 83       	st	Z, r24


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     570:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     572:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     574:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     576:	75 9a       	sbi	0x0e, 5	; 14
	adc_pin_config();
	motion_pin_config();
	
 left_encoder_pin_config(); //left encoder pin config
 right_encoder_pin_config(); //right encoder pin config	
}
     578:	08 95       	ret

0000057a <adc_init>:


void adc_init(){

	ADCSRA = 0x00;
     57a:	ea e7       	ldi	r30, 0x7A	; 122
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	10 82       	st	Z, r1
	ADCSRB = 0x00;
     580:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;
     584:	80 e2       	ldi	r24, 0x20	; 32
     586:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     58a:	80 e8       	ldi	r24, 0x80	; 128
     58c:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;
     58e:	86 e8       	ldi	r24, 0x86	; 134
     590:	80 83       	st	Z, r24
}
     592:	08 95       	ret

00000594 <timer5_init>:
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{

	TCCR5B = 0x00;	//Stop
     594:	e1 e2       	ldi	r30, 0x21	; 33
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     59a:	9f ef       	ldi	r25, 0xFF	; 255
     59c:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     5a6:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     5aa:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     5ae:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     5b2:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     5b6:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     5ba:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     5be:	89 ea       	ldi	r24, 0xA9	; 169
     5c0:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     5c4:	8b e0       	ldi	r24, 0x0B	; 11
     5c6:	80 83       	st	Z, r24
}
     5c8:	08 95       	ret

000005ca <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5ca:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5cc:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5ce:	8f 70       	andi	r24, 0x0F	; 15
     5d0:	89 2b       	or	r24, r25
 PORTA = PortARestore; 			// setting the command to the port
     5d2:	82 b9       	out	0x02, r24	; 2
}
     5d4:	08 95       	ret

000005d6 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5d6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5d8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5da:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     5dc:	82 b9       	out	0x02, r24	; 2


void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     5de:	08 95       	ret

000005e0 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5e0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5e2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5e4:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     5e6:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     5e8:	08 95       	ret

000005ea <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5ea:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5ec:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5ee:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 			// setting the command to the port
     5f0:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     5f2:	08 95       	ret

000005f4 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5f4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5f6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5f8:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 			// setting the command to the port
     5fa:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     5fc:	08 95       	ret

000005fe <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5fe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     600:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     602:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 			// setting the command to the port
     604:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     606:	08 95       	ret

00000608 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     608:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     60a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     60c:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 			// setting the command to the port
     60e:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     610:	08 95       	ret

00000612 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     612:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     614:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     616:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 			// setting the command to the port
     618:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     61a:	08 95       	ret

0000061c <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     61c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     61e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     620:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 			// setting the command to the port
     622:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     624:	08 95       	ret

00000626 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     626:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     628:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     62a:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set(0x00);
}
     62c:	08 95       	ret

0000062e <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     63a:	a0 e0       	ldi	r26, 0x00	; 0
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	bc 01       	movw	r22, r24
     640:	cd 01       	movw	r24, r26
     642:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__floatunsisf>
     646:	28 e4       	ldi	r18, 0x48	; 72
     648:	31 ee       	ldi	r19, 0xE1	; 225
     64a:	42 e8       	ldi	r20, 0x82	; 130
     64c:	50 e4       	ldi	r21, 0x40	; 64
     64e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     652:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     656:	eb 01       	movw	r28, r22
     658:	7b 01       	movw	r14, r22
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	10 e0       	ldi	r17, 0x00	; 0
 ShaftCountRight = 0; 
     65e:	10 92 1c 03 	sts	0x031C, r1
     662:	10 92 1d 03 	sts	0x031D, r1
     666:	10 92 1e 03 	sts	0x031E, r1
     66a:	10 92 1f 03 	sts	0x031F, r1
 ShaftCountLeft = 0; 
     66e:	10 92 18 03 	sts	0x0318, r1
     672:	10 92 19 03 	sts	0x0319, r1
     676:	10 92 1a 03 	sts	0x031A, r1
     67a:	10 92 1b 03 	sts	0x031B, r1

 while (1)
 {
 	lcd_print(1, 1, ShaftCountLeft, 3);
     67e:	40 91 18 03 	lds	r20, 0x0318
     682:	50 91 19 03 	lds	r21, 0x0319
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	23 e0       	ldi	r18, 0x03	; 3
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
 	lcd_print(1, 5, ShaftCountRight, 3);
     692:	40 91 1c 03 	lds	r20, 0x031C
     696:	50 91 1d 03 	lds	r21, 0x031D
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	65 e0       	ldi	r22, 0x05	; 5
     69e:	23 e0       	ldi	r18, 0x03	; 3
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1, 9, ReqdShaftCountInt, 3);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	69 e0       	ldi	r22, 0x09	; 9
     6aa:	ae 01       	movw	r20, r28
     6ac:	23 e0       	ldi	r18, 0x03	; 3
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     6b4:	80 91 1c 03 	lds	r24, 0x031C
     6b8:	90 91 1d 03 	lds	r25, 0x031D
     6bc:	a0 91 1e 03 	lds	r26, 0x031E
     6c0:	b0 91 1f 03 	lds	r27, 0x031F
     6c4:	8e 15       	cp	r24, r14
     6c6:	9f 05       	cpc	r25, r15
     6c8:	a0 07       	cpc	r26, r16
     6ca:	b1 07       	cpc	r27, r17
     6cc:	68 f4       	brcc	.+26     	; 0x6e8 <angle_rotate+0xba>
     6ce:	80 91 18 03 	lds	r24, 0x0318
     6d2:	90 91 19 03 	lds	r25, 0x0319
     6d6:	a0 91 1a 03 	lds	r26, 0x031A
     6da:	b0 91 1b 03 	lds	r27, 0x031B
     6de:	8e 15       	cp	r24, r14
     6e0:	9f 05       	cpc	r25, r15
     6e2:	a0 07       	cpc	r26, r16
     6e4:	b1 07       	cpc	r27, r17
     6e6:	58 f2       	brcs	.-106    	; 0x67e <angle_rotate+0x50>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     6e8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     6ea:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     6ec:	82 b9       	out	0x02, r24	; 2
	lcd_print(1, 9, ReqdShaftCountInt, 3);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  break;
 }
 stop(); //Stop action
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	08 95       	ret

000006fc <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	bc 01       	movw	r22, r24
     70a:	cd 01       	movw	r24, r26
     70c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__floatunsisf>
     710:	25 ee       	ldi	r18, 0xE5	; 229
     712:	30 ed       	ldi	r19, 0xD0	; 208
     714:	4a ea       	ldi	r20, 0xAA	; 170
     716:	50 e4       	ldi	r21, 0x40	; 64
     718:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     71c:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     720:	7b 01       	movw	r14, r22
     722:	8c 01       	movw	r16, r24
  
 ShaftCountRight = 0;
     724:	10 92 1c 03 	sts	0x031C, r1
     728:	10 92 1d 03 	sts	0x031D, r1
     72c:	10 92 1e 03 	sts	0x031E, r1
     730:	10 92 1f 03 	sts	0x031F, r1
 while(1)
 {
 	lcd_print(1, 1, ShaftCountLeft, 3);
     734:	40 91 18 03 	lds	r20, 0x0318
     738:	50 91 19 03 	lds	r21, 0x0319
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	23 e0       	ldi	r18, 0x03	; 3
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
 	lcd_print(1, 5, ShaftCountRight, 3);
     748:	40 91 1c 03 	lds	r20, 0x031C
     74c:	50 91 1d 03 	lds	r21, 0x031D
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	65 e0       	ldi	r22, 0x05	; 5
     754:	23 e0       	ldi	r18, 0x03	; 3
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1, 9, ReqdShaftCountInt, 3);
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	69 e0       	ldi	r22, 0x09	; 9
     760:	a7 01       	movw	r20, r14
     762:	23 e0       	ldi	r18, 0x03	; 3
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
  if(ShaftCountRight > ReqdShaftCountInt)
     76a:	80 91 1c 03 	lds	r24, 0x031C
     76e:	90 91 1d 03 	lds	r25, 0x031D
     772:	a0 91 1e 03 	lds	r26, 0x031E
     776:	b0 91 1f 03 	lds	r27, 0x031F
     77a:	e8 16       	cp	r14, r24
     77c:	f9 06       	cpc	r15, r25
     77e:	0a 07       	cpc	r16, r26
     780:	1b 07       	cpc	r17, r27
     782:	c0 f6       	brcc	.-80     	; 0x734 <linear_distance_mm+0x38>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     784:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     786:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     788:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop action
}
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	08 95       	ret

00000794 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     794:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     796:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     798:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     79a:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
 forward();
 linear_distance_mm(DistanceInMM);
     79c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <linear_distance_mm>
}
     7a0:	08 95       	ret

000007a2 <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     7a2:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     7a4:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     7a6:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     7a8:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
 back();
 linear_distance_mm(DistanceInMM);
     7aa:	0e 94 7e 03 	call	0x6fc	; 0x6fc <linear_distance_mm>
}
     7ae:	08 95       	ret

000007b0 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     7b0:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     7b2:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     7b4:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 			// setting the command to the port
     7b6:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
     7b8:	0e 94 17 03 	call	0x62e	; 0x62e <angle_rotate>
}
     7bc:	08 95       	ret

000007be <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     7be:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     7c0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     7c2:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 			// setting the command to the port
     7c4:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
     7c6:	0e 94 17 03 	call	0x62e	; 0x62e <angle_rotate>
}
     7ca:	08 95       	ret

000007cc <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     7cc:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     7ce:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     7d0:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 			// setting the command to the port
     7d2:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	0e 94 17 03 	call	0x62e	; 0x62e <angle_rotate>
}
     7dc:	08 95       	ret

000007de <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     7de:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     7e0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     7e2:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 			// setting the command to the port
     7e4:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	0e 94 17 03 	call	0x62e	; 0x62e <angle_rotate>
}
     7ee:	08 95       	ret

000007f0 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     7f0:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     7f2:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     7f4:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 			// setting the command to the port
     7f6:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	0e 94 17 03 	call	0x62e	; 0x62e <angle_rotate>
}
     800:	08 95       	ret

00000802 <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     802:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     804:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     806:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 			// setting the command to the port
     808:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	0e 94 17 03 	call	0x62e	; 0x62e <angle_rotate>
}
     812:	08 95       	ret

00000814 <ADC_Conversion>:



unsigned char ADC_Conversion(unsigned char Ch){
     814:	98 2f       	mov	r25, r24

	unsigned char a;

	if(Ch>7){
     816:	88 30       	cpi	r24, 0x08	; 8
     818:	18 f0       	brcs	.+6      	; 0x820 <ADC_Conversion+0xc>
		ADCSRB = 0x08;
     81a:	88 e0       	ldi	r24, 0x08	; 8
     81c:	80 93 7b 00 	sts	0x007B, r24
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     820:	97 70       	andi	r25, 0x07	; 7
     822:	90 62       	ori	r25, 0x20	; 32
     824:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;
     828:	80 91 7a 00 	lds	r24, 0x007A
     82c:	80 64       	ori	r24, 0x40	; 64
     82e:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     832:	80 91 7a 00 	lds	r24, 0x007A
     836:	84 ff       	sbrs	r24, 4
     838:	fc cf       	rjmp	.-8      	; 0x832 <ADC_Conversion+0x1e>

	a = ADCH;
     83a:	80 91 79 00 	lds	r24, 0x0079
	ADCSRB = 0x00;
     83e:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     842:	08 95       	ret

00000844 <print_sensor>:

void print_sensor(char row, char column, unsigned char channel){
     844:	98 2f       	mov	r25, r24

unsigned char ADC_Conversion(unsigned char Ch){

	unsigned char a;

	if(Ch>7){
     846:	48 30       	cpi	r20, 0x08	; 8
     848:	18 f0       	brcs	.+6      	; 0x850 <print_sensor+0xc>
		ADCSRB = 0x08;
     84a:	88 e0       	ldi	r24, 0x08	; 8
     84c:	80 93 7b 00 	sts	0x007B, r24
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     850:	47 70       	andi	r20, 0x07	; 7
     852:	40 62       	ori	r20, 0x20	; 32
     854:	40 93 7c 00 	sts	0x007C, r20
	ADCSRA = ADCSRA | 0x40;
     858:	80 91 7a 00 	lds	r24, 0x007A
     85c:	80 64       	ori	r24, 0x40	; 64
     85e:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     862:	80 91 7a 00 	lds	r24, 0x007A
     866:	84 ff       	sbrs	r24, 4
     868:	fc cf       	rjmp	.-8      	; 0x862 <print_sensor+0x1e>

	a = ADCH;
     86a:	40 91 79 00 	lds	r20, 0x0079
	ADCSRB = 0x00;
     86e:	10 92 7b 00 	sts	0x007B, r1
	return a;
}

void print_sensor(char row, char column, unsigned char channel){
	
	ADC_Value = ADC_Conversion(channel);
     872:	40 93 4c 03 	sts	0x034C, r20
	lcd_print(row, column, ADC_Value, 3);
     876:	89 2f       	mov	r24, r25
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	23 e0       	ldi	r18, 0x03	; 3
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
}
     882:	08 95       	ret

00000884 <velocity>:

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
     884:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
     888:	60 93 2a 01 	sts	0x012A, r22
}	
     88c:	08 95       	ret

0000088e <Sharp_GP2D120_estimation>:
	}

	return distanceInt;
}

unsigned int Sharp_GP2D120_estimation(unsigned char adc_reading){
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17

	float distance;
	distance = (int) (10.00*((1.00/ ((0.001240875*(float) adc_reading) + 0.005)) - 0.42));
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	a0 e0       	ldi	r26, 0x00	; 0
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	bc 01       	movw	r22, r24
     89e:	cd 01       	movw	r24, r26
     8a0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__floatunsisf>
     8a4:	2b ed       	ldi	r18, 0xDB	; 219
     8a6:	34 ea       	ldi	r19, 0xA4	; 164
     8a8:	42 ea       	ldi	r20, 0xA2	; 162
     8aa:	5a e3       	ldi	r21, 0x3A	; 58
     8ac:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     8b0:	2a e0       	ldi	r18, 0x0A	; 10
     8b2:	37 ed       	ldi	r19, 0xD7	; 215
     8b4:	43 ea       	ldi	r20, 0xA3	; 163
     8b6:	5b e3       	ldi	r21, 0x3B	; 59
     8b8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__addsf3>
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e8       	ldi	r24, 0x80	; 128
     8c6:	9f e3       	ldi	r25, 0x3F	; 63
     8c8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     8cc:	2d e3       	ldi	r18, 0x3D	; 61
     8ce:	3a e0       	ldi	r19, 0x0A	; 10
     8d0:	47 ed       	ldi	r20, 0xD7	; 215
     8d2:	5e e3       	ldi	r21, 0x3E	; 62
     8d4:	0e 94 8f 0b 	call	0x171e	; 0x171e <__subsf3>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e2       	ldi	r20, 0x20	; 32
     8de:	51 e4       	ldi	r21, 0x41	; 65
     8e0:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     8e4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fixsfsi>
     8e8:	88 27       	eor	r24, r24
     8ea:	77 fd       	sbrc	r23, 7
     8ec:	80 95       	com	r24
     8ee:	98 2f       	mov	r25, r24
     8f0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__floatsisf>
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24


	int distanceInt = (int) distance;

	if(distance>400){
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	48 ec       	ldi	r20, 0xC8	; 200
     8fe:	53 e4       	ldi	r21, 0x43	; 67
     900:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     904:	18 16       	cp	r1, r24
     906:	1c f4       	brge	.+6      	; 0x90e <Sharp_GP2D120_estimation+0x80>
     908:	60 e9       	ldi	r22, 0x90	; 144
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	04 c0       	rjmp	.+8      	; 0x916 <Sharp_GP2D120_estimation+0x88>

	float distance;
	distance = (int) (10.00*((1.00/ ((0.001240875*(float) adc_reading) + 0.005)) - 0.42));


	int distanceInt = (int) distance;
     90e:	c8 01       	movw	r24, r16
     910:	b7 01       	movw	r22, r14
     912:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fixsfsi>
	if(distance>400){
		distanceInt = 400;
	}

	return distanceInt;
}
     916:	cb 01       	movw	r24, r22
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	08 95       	ret

00000922 <init_devices>:


void init_devices(void){

cli(); //disable all interrupts
     922:	f8 94       	cli
	port_init();
     924:	0e 94 9c 02 	call	0x538	; 0x538 <port_init>
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     928:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     92a:	ea e6       	ldi	r30, 0x6A	; 106
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	82 60       	ori	r24, 0x02	; 2
     932:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     934:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     936:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     938:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     93a:	ea e6       	ldi	r30, 0x6A	; 106
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	88 60       	ori	r24, 0x08	; 8
     942:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     944:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     946:	78 94       	sei
}


void adc_init(){

	ADCSRA = 0x00;
     948:	ea e7       	ldi	r30, 0x7A	; 122
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	10 82       	st	Z, r1
	ADCSRB = 0x00;
     94e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     958:	80 e8       	ldi	r24, 0x80	; 128
     95a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;
     95c:	86 e8       	ldi	r24, 0x86	; 134
     95e:	80 83       	st	Z, r24
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{

	TCCR5B = 0x00;	//Stop
     960:	e1 e2       	ldi	r30, 0x21	; 33
     962:	f1 e0       	ldi	r31, 0x01	; 1
     964:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     966:	9f ef       	ldi	r25, 0xFF	; 255
     968:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     972:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     976:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     97a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     97e:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     982:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     986:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     98a:	89 ea       	ldi	r24, 0xA9	; 169
     98c:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     990:	8b e0       	ldi	r24, 0x0B	; 11
     992:	80 83       	st	Z, r24
	port_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	adc_init();
	timer5_init();
sei(); //re-enable interrupts
     994:	78 94       	sei

}
     996:	08 95       	ret

00000998 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     998:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     99a:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     99c:	88 b9       	out	0x08, r24	; 8
}
     99e:	08 95       	ret

000009a0 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     9a0:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     9a2:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     9a4:	88 b9       	out	0x08, r24	; 8
}
     9a6:	08 95       	ret

000009a8 <uart0_init>:




void uart0_init(void){
  UCSR0B = 0x00; //disable while setting baud rate
     9a8:	e1 ec       	ldi	r30, 0xC1	; 193
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	10 82       	st	Z, r1
  UCSR0A = 0x00;
     9ae:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0C = 0x06;
     9b2:	86 e0       	ldi	r24, 0x06	; 6
     9b4:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = 0x47; //set baud rate lo
     9b8:	87 e4       	ldi	r24, 0x47	; 71
     9ba:	80 93 c4 00 	sts	0x00C4, r24
  UBRR0H = 0x00; //set baud rate hi
     9be:	10 92 c5 00 	sts	0x00C5, r1
  UCSR0B = 0x98;
     9c2:	88 e9       	ldi	r24, 0x98	; 152
     9c4:	80 83       	st	Z, r24
}
     9c6:	08 95       	ret

000009c8 <__vector_25>:



SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	0b b6       	in	r0, 0x3b	; 59
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	unsigned char data = UDR0;
     9f8:	d0 90 c6 00 	lds	r13, 0x00C6
	
	int binVal = (int) data;
     9fc:	0d 2d       	mov	r16, r13
     9fe:	10 e0       	ldi	r17, 0x00	; 0

	int dir = binVal/50;
     a00:	c8 01       	movw	r24, r16
     a02:	62 e3       	ldi	r22, 0x32	; 50
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	0e 94 27 11 	call	0x224e	; 0x224e <__divmodhi4>
     a0a:	9b 01       	movw	r18, r22
	binVal = (binVal-dir*50);
     a0c:	8e ec       	ldi	r24, 0xCE	; 206
     a0e:	9f ef       	ldi	r25, 0xFF	; 255
     a10:	68 9f       	mul	r22, r24
     a12:	f0 01       	movw	r30, r0
     a14:	69 9f       	mul	r22, r25
     a16:	f0 0d       	add	r31, r0
     a18:	78 9f       	mul	r23, r24
     a1a:	f0 0d       	add	r31, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	e0 0f       	add	r30, r16
     a20:	f1 1f       	adc	r31, r17
	int lane = binVal/6;
     a22:	cf 01       	movw	r24, r30
     a24:	66 e0       	ldi	r22, 0x06	; 6
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 27 11 	call	0x224e	; 0x224e <__divmodhi4>
     a2c:	8b 01       	movw	r16, r22
	binVal = (binVal-lane*6);
     a2e:	8a ef       	ldi	r24, 0xFA	; 250
     a30:	9f ef       	ldi	r25, 0xFF	; 255
     a32:	68 9f       	mul	r22, r24
     a34:	70 01       	movw	r14, r0
     a36:	69 9f       	mul	r22, r25
     a38:	f0 0c       	add	r15, r0
     a3a:	78 9f       	mul	r23, r24
     a3c:	f0 0c       	add	r15, r0
     a3e:	11 24       	eor	r1, r1
     a40:	ee 0e       	add	r14, r30
     a42:	ff 1e       	adc	r15, r31
	int skipLane = binVal;

// write the values of direction  , turning lanes and skip lanes in the appropriate arrays
	t[counter] = dir;
     a44:	e0 91 26 03 	lds	r30, 0x0326
     a48:	f0 91 27 03 	lds	r31, 0x0327
     a4c:	df 01       	movw	r26, r30
     a4e:	a6 5d       	subi	r26, 0xD6	; 214
     a50:	bc 4f       	sbci	r27, 0xFC	; 252
     a52:	2c 93       	st	X, r18
	turningLane[counter] = lane;
     a54:	df 01       	movw	r26, r30
     a56:	ac 5c       	subi	r26, 0xCC	; 204
     a58:	bc 4f       	sbci	r27, 0xFC	; 252
     a5a:	6c 93       	st	X, r22
	skipLanes[counter] = skipLane;
     a5c:	e1 5b       	subi	r30, 0xB1	; 177
     a5e:	fc 4f       	sbci	r31, 0xFC	; 252
     a60:	e0 82       	st	Z, r14

	lcd_print(1, 1, dir, 3);
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	a9 01       	movw	r20, r18
     a68:	23 e0       	ldi	r18, 0x03	; 3
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1, 5, lane, 3);
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	65 e0       	ldi	r22, 0x05	; 5
     a74:	a8 01       	movw	r20, r16
     a76:	23 e0       	ldi	r18, 0x03	; 3
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1, 9, skipLane, 3);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	69 e0       	ldi	r22, 0x09	; 9
     a82:	a7 01       	movw	r20, r14
     a84:	23 e0       	ldi	r18, 0x03	; 3
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2, 1, counter, 3);
     a8c:	40 91 26 03 	lds	r20, 0x0326
     a90:	50 91 27 03 	lds	r21, 0x0327
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	23 e0       	ldi	r18, 0x03	; 3
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2, 5, binVal, 3);
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	65 e0       	ldi	r22, 0x05	; 5
     aa4:	a7 01       	movw	r20, r14
     aa6:	23 e0       	ldi	r18, 0x03	; 3
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	counter++;
     aae:	80 91 26 03 	lds	r24, 0x0326
     ab2:	90 91 27 03 	lds	r25, 0x0327
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	90 93 27 03 	sts	0x0327, r25
     abc:	80 93 26 03 	sts	0x0326, r24
	int x;
	//detect speed of bot
	if(data=='a') {
     ac0:	81 e6       	ldi	r24, 0x61	; 97
     ac2:	d8 16       	cp	r13, r24
     ac4:	39 f4       	brne	.+14     	; 0xad4 <__vector_25+0x10c>
		move=0;
     ac6:	10 92 25 03 	sts	0x0325, r1
     aca:	10 92 24 03 	sts	0x0324, r1
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	2f c0       	rjmp	.+94     	; 0xb32 <__vector_25+0x16a>
		x = 0;
    }
	else if(data=='b') {
     ad4:	82 e6       	ldi	r24, 0x62	; 98
     ad6:	d8 16       	cp	r13, r24
     ad8:	49 f4       	brne	.+18     	; 0xaec <__vector_25+0x124>
		move=1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	90 93 25 03 	sts	0x0325, r25
     ae2:	80 93 24 03 	sts	0x0324, r24
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	23 c0       	rjmp	.+70     	; 0xb32 <__vector_25+0x16a>
		x=1;
	}
	
	if(data=='c') {
     aec:	83 e6       	ldi	r24, 0x63	; 99
     aee:	d8 16       	cp	r13, r24
     af0:	49 f4       	brne	.+18     	; 0xb04 <__vector_25+0x13c>
		vel = 45;
     af2:	8d e2       	ldi	r24, 0x2D	; 45
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	90 93 0f 02 	sts	0x020F, r25
     afa:	80 93 0e 02 	sts	0x020E, r24
     afe:	4e e1       	ldi	r20, 0x1E	; 30
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	17 c0       	rjmp	.+46     	; 0xb32 <__vector_25+0x16a>
		x=30;
	}
	else if(data=='d'){
     b04:	84 e6       	ldi	r24, 0x64	; 100
     b06:	d8 16       	cp	r13, r24
     b08:	49 f4       	brne	.+18     	; 0xb1c <__vector_25+0x154>
		vel = 90;
     b0a:	8a e5       	ldi	r24, 0x5A	; 90
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	90 93 0f 02 	sts	0x020F, r25
     b12:	80 93 0e 02 	sts	0x020E, r24
     b16:	4c e3       	ldi	r20, 0x3C	; 60
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	0b c0       	rjmp	.+22     	; 0xb32 <__vector_25+0x16a>
		x=60;
	}
	else if(data=='e'){
     b1c:	85 e6       	ldi	r24, 0x65	; 101
     b1e:	d8 16       	cp	r13, r24
     b20:	41 f4       	brne	.+16     	; 0xb32 <__vector_25+0x16a>
		vel = 120;
     b22:	88 e7       	ldi	r24, 0x78	; 120
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	90 93 0f 02 	sts	0x020F, r25
     b2a:	80 93 0e 02 	sts	0x020E, r24
     b2e:	4a e5       	ldi	r20, 0x5A	; 90
     b30:	50 e0       	ldi	r21, 0x00	; 0
		x=90;
	}

	//a=````3;

	lcd_print(1, 1, (int)x, 3);
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	23 e0       	ldi	r18, 0x03	; 3
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
}
     b3e:	ff 91       	pop	r31
     b40:	ef 91       	pop	r30
     b42:	bf 91       	pop	r27
     b44:	af 91       	pop	r26
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	7f 91       	pop	r23
     b4c:	6f 91       	pop	r22
     b4e:	5f 91       	pop	r21
     b50:	4f 91       	pop	r20
     b52:	3f 91       	pop	r19
     b54:	2f 91       	pop	r18
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	0f 90       	pop	r0
     b62:	0b be       	out	0x3b, r0	; 59
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <lineFollow>:

void lineFollow(turn t){
     b6e:	bf 92       	push	r11
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	e8 2e       	mov	r14, r24
unsigned char ADC_Conversion(unsigned char Ch){

	unsigned char a;

	if(Ch>7){
		ADCSRB = 0x08;
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	80 93 7b 00 	sts	0x007B, r24
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     b84:	83 e2       	ldi	r24, 0x23	; 35
     b86:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;
     b8a:	80 91 7a 00 	lds	r24, 0x007A
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     b94:	80 91 7a 00 	lds	r24, 0x007A
     b98:	84 ff       	sbrs	r24, 4
     b9a:	fc cf       	rjmp	.-8      	; 0xb94 <lineFollow+0x26>

	a = ADCH;
     b9c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRB = 0x00;
     ba0:	10 92 7b 00 	sts	0x007B, r1
void lineFollow(turn t){

	unsigned char left_line, centre_line, right_line;

// For adaptive cruise control
	Front_Sharp_Sensor = ADC_Conversion(11);
     ba4:	80 93 20 03 	sts	0x0320, r24
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     ba8:	86 e2       	ldi	r24, 0x26	; 38
     baa:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;
     bae:	80 91 7a 00 	lds	r24, 0x007A
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     bb8:	80 91 7a 00 	lds	r24, 0x007A
     bbc:	84 ff       	sbrs	r24, 4
     bbe:	fc cf       	rjmp	.-8      	; 0xbb8 <lineFollow+0x4a>

	a = ADCH;
     bc0:	80 91 79 00 	lds	r24, 0x0079
	ADCSRB = 0x00;
     bc4:	10 92 7b 00 	sts	0x007B, r1

	unsigned char left_line, centre_line, right_line;

// For adaptive cruise control
	Front_Sharp_Sensor = ADC_Conversion(11);
	Front_IR_Sensor = ADC_Conversion(6);
     bc8:	80 93 21 03 	sts	0x0321, r24
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     bcc:	83 e2       	ldi	r24, 0x23	; 35
     bce:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;
     bd2:	80 91 7a 00 	lds	r24, 0x007A
     bd6:	80 64       	ori	r24, 0x40	; 64
     bd8:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     bdc:	80 91 7a 00 	lds	r24, 0x007A
     be0:	84 ff       	sbrs	r24, 4
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <lineFollow+0x6e>

	a = ADCH;
     be4:	f0 90 79 00 	lds	r15, 0x0079
	ADCSRB = 0x00;
     be8:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     bec:	82 e2       	ldi	r24, 0x22	; 34
     bee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;
     bf2:	80 91 7a 00 	lds	r24, 0x007A
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     bfc:	80 91 7a 00 	lds	r24, 0x007A
     c00:	84 ff       	sbrs	r24, 4
     c02:	fc cf       	rjmp	.-8      	; 0xbfc <lineFollow+0x8e>

	a = ADCH;
     c04:	10 91 79 00 	lds	r17, 0x0079
	ADCSRB = 0x00;
     c08:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     c0c:	81 e2       	ldi	r24, 0x21	; 33
     c0e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;
     c12:	80 91 7a 00 	lds	r24, 0x007A
     c16:	80 64       	ori	r24, 0x40	; 64
     c18:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     c1c:	80 91 7a 00 	lds	r24, 0x007A
     c20:	84 ff       	sbrs	r24, 4
     c22:	fc cf       	rjmp	.-8      	; 0xc1c <lineFollow+0xae>

	a = ADCH;
     c24:	00 91 79 00 	lds	r16, 0x0079
	ADCSRB = 0x00;
     c28:	10 92 7b 00 	sts	0x007B, r1
	left_line = ADC_Conversion(3);
	centre_line = ADC_Conversion(2);
	right_line = ADC_Conversion(1);

	//output them on lcd
	lcd_print(1, 1, left_line, 3);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	4f 2d       	mov	r20, r15
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	23 e0       	ldi	r18, 0x03	; 3
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1, 5, centre_line, 3);
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	41 2f       	mov	r20, r17
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	23 e0       	ldi	r18, 0x03	; 3
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1, 9, curTurningLane, 3);
     c4c:	40 91 63 03 	lds	r20, 0x0363
     c50:	50 91 64 03 	lds	r21, 0x0364
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	69 e0       	ldi	r22, 0x09	; 9
     c58:	23 e0       	ldi	r18, 0x03	; 3
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2, 1, count, 3);
     c60:	40 91 65 03 	lds	r20, 0x0365
     c64:	50 91 66 03 	lds	r21, 0x0366
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	23 e0       	ldi	r18, 0x03	; 3
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2, 5, t, 3);
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	65 e0       	ldi	r22, 0x05	; 5
     c78:	4e 2d       	mov	r20, r14
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	23 e0       	ldi	r18, 0x03	; 3
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(2, 9, skip_lanes, 3);
     c84:	40 91 0c 02 	lds	r20, 0x020C
     c88:	50 91 0d 02 	lds	r21, 0x020D
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	69 e0       	ldi	r22, 0x09	; 9
     c90:	23 e0       	ldi	r18, 0x03	; 3
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
		
		// if detects something in front of it then it will stop
	if(Front_Sharp_Sensor>0x82 || Front_IR_Sensor<0xF0){
     c98:	80 91 20 03 	lds	r24, 0x0320
     c9c:	83 38       	cpi	r24, 0x83	; 131
     c9e:	20 f4       	brcc	.+8      	; 0xca8 <lineFollow+0x13a>
     ca0:	80 91 21 03 	lds	r24, 0x0321
     ca4:	80 3f       	cpi	r24, 0xF0	; 240
     ca6:	30 f4       	brcc	.+12     	; 0xcb4 <lineFollow+0x146>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     ca8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     caa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     cac:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     cae:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	11 c3       	rjmp	.+1570   	; 0x12d6 <lineFollow+0x768>
		//flag2=1;
		stop();
		buzzer_on();			
	}
			
	else if (centre_line > 0x10 && left_line > 0x18 && right_line < 0x18) {
     cb4:	11 31       	cpi	r17, 0x11	; 17
     cb6:	08 f4       	brcc	.+2      	; 0xcba <lineFollow+0x14c>
     cb8:	77 c0       	rjmp	.+238    	; 0xda8 <lineFollow+0x23a>
     cba:	88 e1       	ldi	r24, 0x18	; 24
     cbc:	8f 15       	cp	r24, r15
     cbe:	d0 f4       	brcc	.+52     	; 0xcf4 <lineFollow+0x186>
     cc0:	08 31       	cpi	r16, 0x18	; 24
     cc2:	c0 f4       	brcc	.+48     	; 0xcf4 <lineFollow+0x186>
		prevState=1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 29 03 	sts	0x0329, r25
     ccc:	80 93 28 03 	sts	0x0328, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     cd0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     cd2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     cd4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     cd6:	82 b9       	out	0x02, r24	; 2
		buzzer_on();			
	}
			
	else if (centre_line > 0x10 && left_line > 0x18 && right_line < 0x18) {
		prevState=1;
		forward();velocity(vel, vel/2);buzzer_off(); //move a little right
     cd8:	20 91 0e 02 	lds	r18, 0x020E
     cdc:	82 2f       	mov	r24, r18
     cde:	90 91 0f 02 	lds	r25, 0x020F
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	0e 94 27 11 	call	0x224e	; 0x224e <__divmodhi4>

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
     cea:	20 93 28 01 	sts	0x0128, r18
	OCR5BL = (unsigned char)right_motion;
     cee:	60 93 2a 01 	sts	0x012A, r22
     cf2:	ef c2       	rjmp	.+1502   	; 0x12d2 <lineFollow+0x764>
			
	else if (centre_line > 0x10 && left_line > 0x18 && right_line < 0x18) {
		prevState=1;
		forward();velocity(vel, vel/2);buzzer_off(); //move a little right
	}
	else if (centre_line > 0x10 && right_line > 0x18 && left_line < 0x18) {
     cf4:	09 31       	cpi	r16, 0x19	; 25
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <lineFollow+0x18c>
     cf8:	57 c0       	rjmp	.+174    	; 0xda8 <lineFollow+0x23a>
     cfa:	87 e1       	ldi	r24, 0x17	; 23
     cfc:	8f 15       	cp	r24, r15
     cfe:	c0 f0       	brcs	.+48     	; 0xd30 <lineFollow+0x1c2>
		prevState=2;
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 93 29 03 	sts	0x0329, r25
     d08:	80 93 28 03 	sts	0x0328, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     d0c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     d0e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     d10:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     d12:	82 b9       	out	0x02, r24	; 2
		prevState=1;
		forward();velocity(vel, vel/2);buzzer_off(); //move a little right
	}
	else if (centre_line > 0x10 && right_line > 0x18 && left_line < 0x18) {
		prevState=2;
		forward();velocity(vel/2,  vel); buzzer_off();// move a little left
     d14:	20 91 0e 02 	lds	r18, 0x020E
     d18:	82 2f       	mov	r24, r18
     d1a:	90 91 0f 02 	lds	r25, 0x020F
     d1e:	62 e0       	ldi	r22, 0x02	; 2
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	0e 94 27 11 	call	0x224e	; 0x224e <__divmodhi4>

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
     d26:	60 93 28 01 	sts	0x0128, r22
	OCR5BL = (unsigned char)right_motion;
     d2a:	20 93 2a 01 	sts	0x012A, r18
     d2e:	d1 c2       	rjmp	.+1442   	; 0x12d2 <lineFollow+0x764>
	}
	else if (centre_line > 0x10 && right_line > 0x18 && left_line < 0x18) {
		prevState=2;
		forward();velocity(vel/2,  vel); buzzer_off();// move a little left
	}
	else if (centre_line > 0x10 && right_line > 0x18 && left_line > 0x18) {
     d30:	88 e1       	ldi	r24, 0x18	; 24
     d32:	f8 16       	cp	r15, r24
     d34:	c9 f1       	breq	.+114    	; 0xda8 <lineFollow+0x23a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     d36:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     d38:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     d3a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     d3c:	82 b9       	out	0x02, r24	; 2

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
     d3e:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motion;
     d42:	10 92 2a 01 	sts	0x012A, r1
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     d46:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     d48:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     d4a:	88 b9       	out	0x08, r24	; 8
		prevState=2;
		forward();velocity(vel/2,  vel); buzzer_off();// move a little left
	}
	else if (centre_line > 0x10 && right_line > 0x18 && left_line > 0x18) {
		forward();velocity(0,0);buzzer_off(); //stop, got lost
		if(prevState==1)// move based on previous state
     d4c:	80 91 28 03 	lds	r24, 0x0328
     d50:	90 91 29 03 	lds	r25, 0x0329
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	91 05       	cpc	r25, r1
     d58:	91 f4       	brne	.+36     	; 0xd7e <lineFollow+0x210>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     d5a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     d5c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     d5e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     d60:	82 b9       	out	0x02, r24	; 2
	else if (centre_line > 0x10 && right_line > 0x18 && left_line > 0x18) {
		forward();velocity(0,0);buzzer_off(); //stop, got lost
		if(prevState==1)// move based on previous state
		{
		forward();
		velocity( vel, vel/2);
     d62:	20 91 0e 02 	lds	r18, 0x020E
     d66:	82 2f       	mov	r24, r18
     d68:	90 91 0f 02 	lds	r25, 0x020F
     d6c:	62 e0       	ldi	r22, 0x02	; 2
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	0e 94 27 11 	call	0x224e	; 0x224e <__divmodhi4>

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
     d74:	20 93 28 01 	sts	0x0128, r18
	OCR5BL = (unsigned char)right_motion;
     d78:	60 93 2a 01 	sts	0x012A, r22
     d7c:	ad c2       	rjmp	.+1370   	; 0x12d8 <lineFollow+0x76a>
		if(prevState==1)// move based on previous state
		{
		forward();
		velocity( vel, vel/2);
		}
		else if(prevState==2){
     d7e:	02 97       	sbiw	r24, 0x02	; 2
     d80:	09 f0       	breq	.+2      	; 0xd84 <lineFollow+0x216>
     d82:	aa c2       	rjmp	.+1364   	; 0x12d8 <lineFollow+0x76a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     d84:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     d86:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     d88:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     d8a:	82 b9       	out	0x02, r24	; 2
		{
		forward();
		velocity( vel, vel/2);
		}
		else if(prevState==2){
		forward();velocity(vel/2, vel);
     d8c:	20 91 0e 02 	lds	r18, 0x020E
     d90:	82 2f       	mov	r24, r18
     d92:	90 91 0f 02 	lds	r25, 0x020F
     d96:	62 e0       	ldi	r22, 0x02	; 2
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	0e 94 27 11 	call	0x224e	; 0x224e <__divmodhi4>

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
     d9e:	60 93 28 01 	sts	0x0128, r22
	OCR5BL = (unsigned char)right_motion;
     da2:	20 93 2a 01 	sts	0x012A, r18
     da6:	98 c2       	rjmp	.+1328   	; 0x12d8 <lineFollow+0x76a>
		}
		else if(prevState==2){
		forward();velocity(vel/2, vel);
		}
	}
	else if (centre_line < 0x10 && right_line < 0x10 && left_line < 0x10) {
     da8:	10 31       	cpi	r17, 0x10	; 16
     daa:	08 f0       	brcs	.+2      	; 0xdae <lineFollow+0x240>
     dac:	86 c2       	rjmp	.+1292   	; 0x12ba <lineFollow+0x74c>
     dae:	00 31       	cpi	r16, 0x10	; 16
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <lineFollow+0x246>
     db2:	85 c2       	rjmp	.+1290   	; 0x12be <lineFollow+0x750>
     db4:	8f e0       	ldi	r24, 0x0F	; 15
     db6:	8f 15       	cp	r24, r15
     db8:	08 f4       	brcc	.+2      	; 0xdbc <lineFollow+0x24e>
     dba:	81 c2       	rjmp	.+1282   	; 0x12be <lineFollow+0x750>
		prevState=0;
     dbc:	10 92 29 03 	sts	0x0329, r1
     dc0:	10 92 28 03 	sts	0x0328, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     dc4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     dc6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     dc8:	82 b9       	out	0x02, r24	; 2
     dca:	80 e1       	ldi	r24, 0x10	; 16
     dcc:	97 e2       	ldi	r25, 0x27	; 39
     dce:	24 e1       	ldi	r18, 0x14	; 20
     dd0:	31 e0       	ldi	r19, 0x01	; 1
     dd2:	f9 01       	movw	r30, r18
     dd4:	31 97       	sbiw	r30, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <lineFollow+0x266>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	d9 f7       	brne	.-10     	; 0xdd2 <lineFollow+0x264>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     ddc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     dde:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     de0:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     de2:	82 b9       	out	0x02, r24	; 2
		prevState=0;
		stop();
		_delay_ms(1000);
		forward();
			// stop, intersection detected!
			count++; // for counting lanes, i have got one lane
     de4:	80 91 65 03 	lds	r24, 0x0365
     de8:	90 91 66 03 	lds	r25, 0x0366
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	90 93 66 03 	sts	0x0366, r25
     df2:	80 93 65 03 	sts	0x0365, r24
			
	    	lcd_print(1, 5, centre_line, 3);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	65 e0       	ldi	r22, 0x05	; 5
     dfa:	41 2f       	mov	r20, r17
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	23 e0       	ldi	r18, 0x03	; 3
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
     		lcd_print(1, 9, curTurningLane, 3);
     e06:	40 91 63 03 	lds	r20, 0x0363
     e0a:	50 91 64 03 	lds	r21, 0x0364
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	69 e0       	ldi	r22, 0x09	; 9
     e12:	23 e0       	ldi	r18, 0x03	; 3
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    	lcd_print(2, 1, count, 3);
     e1a:	40 91 65 03 	lds	r20, 0x0365
     e1e:	50 91 66 03 	lds	r21, 0x0366
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	23 e0       	ldi	r18, 0x03	; 3
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			lcd_print(2, 5, t, 3);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	65 e0       	ldi	r22, 0x05	; 5
     e32:	4e 2d       	mov	r20, r14
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	23 e0       	ldi	r18, 0x03	; 3
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			lcd_print(2, 9, skip_lanes, 3);
     e3e:	40 91 0c 02 	lds	r20, 0x020C
     e42:	50 91 0d 02 	lds	r21, 0x020D
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	69 e0       	ldi	r22, 0x09	; 9
     e4a:	23 e0       	ldi	r18, 0x03	; 3
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			//_delay_ms(1000);
			if(count==curTurningLane && right_skip==0) {
     e52:	20 91 65 03 	lds	r18, 0x0365
     e56:	30 91 66 03 	lds	r19, 0x0366
     e5a:	80 91 63 03 	lds	r24, 0x0363
     e5e:	90 91 64 03 	lds	r25, 0x0364
     e62:	28 17       	cp	r18, r24
     e64:	39 07       	cpc	r19, r25
     e66:	09 f0       	breq	.+2      	; 0xe6a <lineFollow+0x2fc>
     e68:	aa c1       	rjmp	.+852    	; 0x11be <lineFollow+0x650>
     e6a:	80 91 22 03 	lds	r24, 0x0322
     e6e:	90 91 23 03 	lds	r25, 0x0323
     e72:	89 2b       	or	r24, r25
     e74:	09 f0       	breq	.+2      	; 0xe78 <lineFollow+0x30a>
     e76:	a3 c1       	rjmp	.+838    	; 0x11be <lineFollow+0x650>
			// if this is the right lane where we have to turn (or move ahead)    
				if(t==L)
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	e8 16       	cp	r14, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <lineFollow+0x312>
     e7e:	6c c0       	rjmp	.+216    	; 0xf58 <lineFollow+0x3ea>
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     e80:	22 e2       	ldi	r18, 0x22	; 34
     e82:	d2 2e       	mov	r13, r18
	ADCSRA = ADCSRA | 0x40;
     e84:	91 e2       	ldi	r25, 0x21	; 33
     e86:	e9 2e       	mov	r14, r25
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     e88:	d0 92 7c 00 	sts	0x007C, r13
	ADCSRA = ADCSRA | 0x40;
     e8c:	80 91 7a 00 	lds	r24, 0x007A
     e90:	80 64       	ori	r24, 0x40	; 64
     e92:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     e96:	80 91 7a 00 	lds	r24, 0x007A
     e9a:	84 ff       	sbrs	r24, 4
     e9c:	fc cf       	rjmp	.-8      	; 0xe96 <lineFollow+0x328>

	a = ADCH;
     e9e:	10 91 79 00 	lds	r17, 0x0079
	ADCSRB = 0x00;
     ea2:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     ea6:	e0 92 7c 00 	sts	0x007C, r14
	ADCSRA = ADCSRA | 0x40;
     eaa:	80 91 7a 00 	lds	r24, 0x007A
     eae:	80 64       	ori	r24, 0x40	; 64
     eb0:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     eb4:	80 91 7a 00 	lds	r24, 0x007A
     eb8:	84 ff       	sbrs	r24, 4
     eba:	fc cf       	rjmp	.-8      	; 0xeb4 <lineFollow+0x346>

	a = ADCH;
     ebc:	00 91 79 00 	lds	r16, 0x0079
	ADCSRB = 0x00;
     ec0:	10 92 7b 00 	sts	0x007B, r1
				// skip past the junction by just moving straight
				while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
						//left_line = ADC_Conversion(3);
						centre_line = ADC_Conversion(2);
						right_line = ADC_Conversion(1);
						lcd_print(1, 1, left_line, 3);
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	4f 2d       	mov	r20, r15
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	23 e0       	ldi	r18, 0x03	; 3
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    				lcd_print(1, 5, centre_line, 3);
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	65 e0       	ldi	r22, 0x05	; 5
     ed8:	41 2f       	mov	r20, r17
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	23 e0       	ldi	r18, 0x03	; 3
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    				lcd_print(1, 9, curTurningLane, 3);
     ee4:	40 91 63 03 	lds	r20, 0x0363
     ee8:	50 91 64 03 	lds	r21, 0x0364
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	69 e0       	ldi	r22, 0x09	; 9
     ef0:	23 e0       	ldi	r18, 0x03	; 3
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
						lcd_print(2, 1, count, 3);
     ef8:	40 91 65 03 	lds	r20, 0x0365
     efc:	50 91 66 03 	lds	r21, 0x0366
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	23 e0       	ldi	r18, 0x03	; 3
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
						lcd_print(2, 5, t, 3);
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	65 e0       	ldi	r22, 0x05	; 5
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	23 e0       	ldi	r18, 0x03	; 3
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
						lcd_print(2, 9, skip_lanes, 3);
     f1c:	40 91 0c 02 	lds	r20, 0x020C
     f20:	50 91 0d 02 	lds	r21, 0x020D
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	69 e0       	ldi	r22, 0x09	; 9
     f28:	23 e0       	ldi	r18, 0x03	; 3
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     f30:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     f32:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     f34:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     f36:	82 b9       	out	0x02, r24	; 2
	    				lcd_print(1, 9, curTurningLane, 3);
						lcd_print(2, 1, count, 3);
						lcd_print(2, 5, t, 3);
						lcd_print(2, 9, skip_lanes, 3);
						forward();
						velocity(vel,vel);				
     f38:	80 91 0e 02 	lds	r24, 0x020E

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
     f3c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
     f40:	80 93 2a 01 	sts	0x012A, r24
			if(count==curTurningLane && right_skip==0) {
			// if this is the right lane where we have to turn (or move ahead)    
				if(t==L)
				{
				// skip past the junction by just moving straight
				while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
     f44:	10 31       	cpi	r17, 0x10	; 16
     f46:	18 f4       	brcc	.+6      	; 0xf4e <lineFollow+0x3e0>
     f48:	00 31       	cpi	r16, 0x10	; 16
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <lineFollow+0x3e0>
     f4c:	9d cf       	rjmp	.-198    	; 0xe88 <lineFollow+0x31a>
						lcd_print(2, 9, skip_lanes, 3);
						forward();
						velocity(vel,vel);				
				}
				//linear_distance_mm(10);
				left_degrees(90);// take a hard left turn
     f4e:	8a e5       	ldi	r24, 0x5A	; 90
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <left_degrees>
     f56:	17 c1       	rjmp	.+558    	; 0x1186 <lineFollow+0x618>
				}
				else if(t==R)
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	e8 16       	cp	r14, r24
     f5c:	09 f0       	breq	.+2      	; 0xf60 <lineFollow+0x3f2>
     f5e:	9d c0       	rjmp	.+314    	; 0x109a <lineFollow+0x52c>
				{
				
					right_skip = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 23 03 	sts	0x0323, r25
     f68:	80 93 22 03 	sts	0x0322, r24
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     f6c:	83 e2       	ldi	r24, 0x23	; 35
     f6e:	c8 2e       	mov	r12, r24
	ADCSRA = ADCSRA | 0x40;
     f70:	02 e2       	ldi	r16, 0x22	; 34
     f72:	d0 2e       	mov	r13, r16
     f74:	11 e2       	ldi	r17, 0x21	; 33
     f76:	e1 2e       	mov	r14, r17
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     f78:	c0 92 7c 00 	sts	0x007C, r12
	ADCSRA = ADCSRA | 0x40;
     f7c:	80 91 7a 00 	lds	r24, 0x007A
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     f86:	80 91 7a 00 	lds	r24, 0x007A
     f8a:	84 ff       	sbrs	r24, 4
     f8c:	fc cf       	rjmp	.-8      	; 0xf86 <lineFollow+0x418>

	a = ADCH;
     f8e:	f0 90 79 00 	lds	r15, 0x0079
	ADCSRB = 0x00;
     f92:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     f96:	d0 92 7c 00 	sts	0x007C, r13
	ADCSRA = ADCSRA | 0x40;
     f9a:	80 91 7a 00 	lds	r24, 0x007A
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     fa4:	80 91 7a 00 	lds	r24, 0x007A
     fa8:	84 ff       	sbrs	r24, 4
     faa:	fc cf       	rjmp	.-8      	; 0xfa4 <lineFollow+0x436>

	a = ADCH;
     fac:	10 91 79 00 	lds	r17, 0x0079
	ADCSRB = 0x00;
     fb0:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
     fb4:	e0 92 7c 00 	sts	0x007C, r14
	ADCSRA = ADCSRA | 0x40;
     fb8:	80 91 7a 00 	lds	r24, 0x007A
     fbc:	80 64       	ori	r24, 0x40	; 64
     fbe:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
     fc2:	80 91 7a 00 	lds	r24, 0x007A
     fc6:	84 ff       	sbrs	r24, 4
     fc8:	fc cf       	rjmp	.-8      	; 0xfc2 <lineFollow+0x454>

	a = ADCH;
     fca:	00 91 79 00 	lds	r16, 0x0079
	ADCSRB = 0x00;
     fce:	10 92 7b 00 	sts	0x007B, r1
					while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
						left_line = ADC_Conversion(3);
						centre_line = ADC_Conversion(2);
						right_line = ADC_Conversion(1);
						//lcd_print(1, 1, left_line, 3);
	    				lcd_print(1, 5, centre_line, 3);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	65 e0       	ldi	r22, 0x05	; 5
     fd6:	41 2f       	mov	r20, r17
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	23 e0       	ldi	r18, 0x03	; 3
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    				lcd_print(1, 9, curTurningLane, 3);
     fe2:	40 91 63 03 	lds	r20, 0x0363
     fe6:	50 91 64 03 	lds	r21, 0x0364
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	69 e0       	ldi	r22, 0x09	; 9
     fee:	23 e0       	ldi	r18, 0x03	; 3
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
						lcd_print(2, 1, count, 3);
     ff6:	40 91 65 03 	lds	r20, 0x0365
     ffa:	50 91 66 03 	lds	r21, 0x0366
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	23 e0       	ldi	r18, 0x03	; 3
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			    		lcd_print(2, 5, t, 3);
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	65 e0       	ldi	r22, 0x05	; 5
    100e:	43 e0       	ldi	r20, 0x03	; 3
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	23 e0       	ldi	r18, 0x03	; 3
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
				    	lcd_print(2, 9, skip_lanes, 3);	
    101a:	40 91 0c 02 	lds	r20, 0x020C
    101e:	50 91 0d 02 	lds	r21, 0x020D
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	69 e0       	ldi	r22, 0x09	; 9
    1026:	23 e0       	ldi	r18, 0x03	; 3
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    102e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1030:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1032:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    1034:	82 b9       	out	0x02, r24	; 2
	    				lcd_print(1, 9, curTurningLane, 3);
						lcd_print(2, 1, count, 3);
			    		lcd_print(2, 5, t, 3);
				    	lcd_print(2, 9, skip_lanes, 3);	
						forward();
						velocity(vel,vel);
    1036:	80 91 0e 02 	lds	r24, 0x020E

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
    103a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
    103e:	80 93 2a 01 	sts	0x012A, r24
				}
				else if(t==R)
				{
				
					right_skip = 1;
					while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
    1042:	10 31       	cpi	r17, 0x10	; 16
    1044:	30 f4       	brcc	.+12     	; 0x1052 <lineFollow+0x4e4>
    1046:	00 31       	cpi	r16, 0x10	; 16
    1048:	20 f4       	brcc	.+8      	; 0x1052 <lineFollow+0x4e4>
    104a:	8f e0       	ldi	r24, 0x0F	; 15
    104c:	8f 15       	cp	r24, r15
    104e:	08 f0       	brcs	.+2      	; 0x1052 <lineFollow+0x4e4>
    1050:	93 cf       	rjmp	.-218    	; 0xf78 <lineFollow+0x40a>
				    	lcd_print(2, 9, skip_lanes, 3);	
						forward();
						velocity(vel,vel);
					}
				//linear_distance_mm(15);
					right_degrees(90);
    1052:	8a e5       	ldi	r24, 0x5A	; 90
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 df 03 	call	0x7be	; 0x7be <right_degrees>
					count=0;
    105a:	10 92 66 03 	sts	0x0366, r1
    105e:	10 92 65 03 	sts	0x0365, r1
					// after turning right it has to skip some lanes which are part of that junction only 
					curTurningLane=skip_lanes;
    1062:	80 91 0c 02 	lds	r24, 0x020C
    1066:	90 91 0d 02 	lds	r25, 0x020D
    106a:	90 93 64 03 	sts	0x0364, r25
    106e:	80 93 63 03 	sts	0x0363, r24
					while(1){
					if(count==curTurningLane) {
    1072:	20 91 65 03 	lds	r18, 0x0365
    1076:	30 91 66 03 	lds	r19, 0x0366
    107a:	80 91 63 03 	lds	r24, 0x0363
    107e:	90 91 64 03 	lds	r25, 0x0364
    1082:	28 17       	cp	r18, r24
    1084:	39 07       	cpc	r19, r25
    1086:	29 f4       	brne	.+10     	; 0x1092 <lineFollow+0x524>
						right_skip = 0;
    1088:	10 92 23 03 	sts	0x0323, r1
    108c:	10 92 22 03 	sts	0x0322, r1
    1090:	7a c0       	rjmp	.+244    	; 0x1186 <lineFollow+0x618>
						break;
					}
					lineFollow(F);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lineFollow>
    1098:	ec cf       	rjmp	.-40     	; 0x1072 <lineFollow+0x504>
					}
				}
				else if(t==F){
    109a:	ee 20       	and	r14, r14
    109c:	09 f0       	breq	.+2      	; 0x10a0 <lineFollow+0x532>
    109e:	73 c0       	rjmp	.+230    	; 0x1186 <lineFollow+0x618>
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    10a0:	b3 e2       	ldi	r27, 0x23	; 35
    10a2:	cb 2e       	mov	r12, r27
	ADCSRA = ADCSRA | 0x40;
    10a4:	a2 e2       	ldi	r26, 0x22	; 34
    10a6:	da 2e       	mov	r13, r26
    10a8:	f1 e2       	ldi	r31, 0x21	; 33
    10aa:	ef 2e       	mov	r14, r31
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    10ac:	c0 92 7c 00 	sts	0x007C, r12
	ADCSRA = ADCSRA | 0x40;
    10b0:	80 91 7a 00 	lds	r24, 0x007A
    10b4:	80 64       	ori	r24, 0x40	; 64
    10b6:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
    10ba:	80 91 7a 00 	lds	r24, 0x007A
    10be:	84 ff       	sbrs	r24, 4
    10c0:	fc cf       	rjmp	.-8      	; 0x10ba <lineFollow+0x54c>

	a = ADCH;
    10c2:	f0 90 79 00 	lds	r15, 0x0079
	ADCSRB = 0x00;
    10c6:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    10ca:	d0 92 7c 00 	sts	0x007C, r13
	ADCSRA = ADCSRA | 0x40;
    10ce:	80 91 7a 00 	lds	r24, 0x007A
    10d2:	80 64       	ori	r24, 0x40	; 64
    10d4:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
    10d8:	80 91 7a 00 	lds	r24, 0x007A
    10dc:	84 ff       	sbrs	r24, 4
    10de:	fc cf       	rjmp	.-8      	; 0x10d8 <lineFollow+0x56a>

	a = ADCH;
    10e0:	10 91 79 00 	lds	r17, 0x0079
	ADCSRB = 0x00;
    10e4:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    10e8:	e0 92 7c 00 	sts	0x007C, r14
	ADCSRA = ADCSRA | 0x40;
    10ec:	80 91 7a 00 	lds	r24, 0x007A
    10f0:	80 64       	ori	r24, 0x40	; 64
    10f2:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
    10f6:	80 91 7a 00 	lds	r24, 0x007A
    10fa:	84 ff       	sbrs	r24, 4
    10fc:	fc cf       	rjmp	.-8      	; 0x10f6 <lineFollow+0x588>

	a = ADCH;
    10fe:	00 91 79 00 	lds	r16, 0x0079
	ADCSRB = 0x00;
    1102:	10 92 7b 00 	sts	0x007B, r1
					while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
						left_line = ADC_Conversion(3);
						centre_line = ADC_Conversion(2);
						right_line = ADC_Conversion(1);
					//	lcd_print(1, 1, left_line, 3);
	    				lcd_print(1, 5, centre_line, 3);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	65 e0       	ldi	r22, 0x05	; 5
    110a:	41 2f       	mov	r20, r17
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	23 e0       	ldi	r18, 0x03	; 3
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    				lcd_print(1, 9, curTurningLane, 3);
    1116:	40 91 63 03 	lds	r20, 0x0363
    111a:	50 91 64 03 	lds	r21, 0x0364
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	69 e0       	ldi	r22, 0x09	; 9
    1122:	23 e0       	ldi	r18, 0x03	; 3
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    				lcd_print(2, 1, count, 3);
    112a:	40 91 65 03 	lds	r20, 0x0365
    112e:	50 91 66 03 	lds	r21, 0x0366
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	23 e0       	ldi	r18, 0x03	; 3
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
						lcd_print(2, 5, t, 3);
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	65 e0       	ldi	r22, 0x05	; 5
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	23 e0       	ldi	r18, 0x03	; 3
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
						lcd_print(2, 9, skip_lanes, 3);
    114e:	40 91 0c 02 	lds	r20, 0x020C
    1152:	50 91 0d 02 	lds	r21, 0x020D
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	69 e0       	ldi	r22, 0x09	; 9
    115a:	23 e0       	ldi	r18, 0x03	; 3
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1162:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1164:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1166:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    1168:	82 b9       	out	0x02, r24	; 2
	    				lcd_print(1, 9, curTurningLane, 3);
	    				lcd_print(2, 1, count, 3);
						lcd_print(2, 5, t, 3);
						lcd_print(2, 9, skip_lanes, 3);
						forward();
						velocity(vel,vel);
    116a:	80 91 0e 02 	lds	r24, 0x020E

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
    116e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
    1172:	80 93 2a 01 	sts	0x012A, r24
					}
					lineFollow(F);
					}
				}
				else if(t==F){
					while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
    1176:	10 31       	cpi	r17, 0x10	; 16
    1178:	30 f4       	brcc	.+12     	; 0x1186 <lineFollow+0x618>
    117a:	00 31       	cpi	r16, 0x10	; 16
    117c:	20 f4       	brcc	.+8      	; 0x1186 <lineFollow+0x618>
    117e:	8f e0       	ldi	r24, 0x0F	; 15
    1180:	8f 15       	cp	r24, r15
    1182:	08 f0       	brcs	.+2      	; 0x1186 <lineFollow+0x618>
    1184:	93 cf       	rjmp	.-218    	; 0x10ac <lineFollow+0x53e>
						lcd_print(2, 9, skip_lanes, 3);
						forward();
						velocity(vel,vel);
					}
				}
				lcd_print(2, 9, right_line, 3);
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	69 e0       	ldi	r22, 0x09	; 9
    118a:	40 2f       	mov	r20, r16
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	23 e0       	ldi	r18, 0x03	; 3
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
				if(right_skip != 1) i++;
    1196:	80 91 22 03 	lds	r24, 0x0322
    119a:	90 91 23 03 	lds	r25, 0x0323
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	49 f0       	breq	.+18     	; 0x11b4 <lineFollow+0x646>
    11a2:	80 91 59 03 	lds	r24, 0x0359
    11a6:	90 91 5a 03 	lds	r25, 0x035A
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	90 93 5a 03 	sts	0x035A, r25
    11b0:	80 93 59 03 	sts	0x0359, r24
				count=0;				
    11b4:	10 92 66 03 	sts	0x0366, r1
    11b8:	10 92 65 03 	sts	0x0365, r1
    11bc:	73 c0       	rjmp	.+230    	; 0x12a4 <lineFollow+0x736>
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    11be:	e3 e2       	ldi	r30, 0x23	; 35
    11c0:	be 2e       	mov	r11, r30
	ADCSRA = ADCSRA | 0x40;
    11c2:	72 e2       	ldi	r23, 0x22	; 34
    11c4:	c7 2e       	mov	r12, r23
    11c6:	61 e2       	ldi	r22, 0x21	; 33
    11c8:	d6 2e       	mov	r13, r22
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    11ca:	b0 92 7c 00 	sts	0x007C, r11
	ADCSRA = ADCSRA | 0x40;
    11ce:	80 91 7a 00 	lds	r24, 0x007A
    11d2:	80 64       	ori	r24, 0x40	; 64
    11d4:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
    11d8:	80 91 7a 00 	lds	r24, 0x007A
    11dc:	84 ff       	sbrs	r24, 4
    11de:	fc cf       	rjmp	.-8      	; 0x11d8 <lineFollow+0x66a>

	a = ADCH;
    11e0:	f0 90 79 00 	lds	r15, 0x0079
	ADCSRB = 0x00;
    11e4:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    11e8:	c0 92 7c 00 	sts	0x007C, r12
	ADCSRA = ADCSRA | 0x40;
    11ec:	80 91 7a 00 	lds	r24, 0x007A
    11f0:	80 64       	ori	r24, 0x40	; 64
    11f2:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
    11f6:	80 91 7a 00 	lds	r24, 0x007A
    11fa:	84 ff       	sbrs	r24, 4
    11fc:	fc cf       	rjmp	.-8      	; 0x11f6 <lineFollow+0x688>

	a = ADCH;
    11fe:	10 91 79 00 	lds	r17, 0x0079
	ADCSRB = 0x00;
    1202:	10 92 7b 00 	sts	0x007B, r1
	if(Ch>7){
		ADCSRB = 0x08;
	}

	Ch = Ch & 0x07;
	ADMUX = 0x20 | Ch;
    1206:	d0 92 7c 00 	sts	0x007C, r13
	ADCSRA = ADCSRA | 0x40;
    120a:	80 91 7a 00 	lds	r24, 0x007A
    120e:	80 64       	ori	r24, 0x40	; 64
    1210:	80 93 7a 00 	sts	0x007A, r24

	while((ADCSRA & 0x10) == 0);
    1214:	80 91 7a 00 	lds	r24, 0x007A
    1218:	84 ff       	sbrs	r24, 4
    121a:	fc cf       	rjmp	.-8      	; 0x1214 <lineFollow+0x6a6>

	a = ADCH;
    121c:	00 91 79 00 	lds	r16, 0x0079
	ADCSRB = 0x00;
    1220:	10 92 7b 00 	sts	0x007B, r1
				while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
					left_line = ADC_Conversion(3);
					centre_line = ADC_Conversion(2);
					right_line = ADC_Conversion(1);
				//	lcd_print(1, 1, left_line, 3);
	    			lcd_print(1, 5, centre_line, 3);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	65 e0       	ldi	r22, 0x05	; 5
    1228:	41 2f       	mov	r20, r17
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	23 e0       	ldi	r18, 0x03	; 3
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    			lcd_print(1, 9, curTurningLane, 3);
    1234:	40 91 63 03 	lds	r20, 0x0363
    1238:	50 91 64 03 	lds	r21, 0x0364
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	69 e0       	ldi	r22, 0x09	; 9
    1240:	23 e0       	ldi	r18, 0x03	; 3
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	    			lcd_print(2, 1, count, 3);
    1248:	40 91 65 03 	lds	r20, 0x0365
    124c:	50 91 66 03 	lds	r21, 0x0366
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	23 e0       	ldi	r18, 0x03	; 3
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
					lcd_print(2, 5, t, 3);
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	65 e0       	ldi	r22, 0x05	; 5
    1260:	4e 2d       	mov	r20, r14
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	23 e0       	ldi	r18, 0x03	; 3
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
					lcd_print(2, 9, skip_lanes, 3);
    126c:	40 91 0c 02 	lds	r20, 0x020C
    1270:	50 91 0d 02 	lds	r21, 0x020D
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	69 e0       	ldi	r22, 0x09	; 9
    1278:	23 e0       	ldi	r18, 0x03	; 3
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1280:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1282:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1284:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    1286:	82 b9       	out	0x02, r24	; 2
	    			lcd_print(1, 9, curTurningLane, 3);
	    			lcd_print(2, 1, count, 3);
					lcd_print(2, 5, t, 3);
					lcd_print(2, 9, skip_lanes, 3);
					forward();
					velocity(vel,vel);
    1288:	80 91 0e 02 	lds	r24, 0x020E

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
    128c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
    1290:	80 93 2a 01 	sts	0x012A, r24
				lcd_print(2, 9, right_line, 3);
				if(right_skip != 1) i++;
				count=0;				
			}
			else{// if lane to skip then move forward along the big square and cross the square
				while(centre_line < 0x10 && right_line < 0x10 && left_line < 0x10){
    1294:	10 31       	cpi	r17, 0x10	; 16
    1296:	30 f4       	brcc	.+12     	; 0x12a4 <lineFollow+0x736>
    1298:	00 31       	cpi	r16, 0x10	; 16
    129a:	20 f4       	brcc	.+8      	; 0x12a4 <lineFollow+0x736>
    129c:	8f e0       	ldi	r24, 0x0F	; 15
    129e:	8f 15       	cp	r24, r15
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <lineFollow+0x736>
    12a2:	93 cf       	rjmp	.-218    	; 0x11ca <lineFollow+0x65c>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    12a4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    12a6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    12a8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    12aa:	82 b9       	out	0x02, r24	; 2
					velocity(vel,vel);
				}
			}
	//	}
		forward();
		velocity(vel,vel);
    12ac:	80 91 0e 02 	lds	r24, 0x020E

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
    12b0:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
    12b4:	80 93 2a 01 	sts	0x012A, r24
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <lineFollow+0x76a>
			}
	//	}
		forward();
		velocity(vel,vel);
	}
	else if (centre_line < 0x12) {
    12ba:	12 31       	cpi	r17, 0x12	; 18
    12bc:	68 f4       	brcc	.+26     	; 0x12d8 <lineFollow+0x76a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    12be:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    12c0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    12c2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    12c4:	82 b9       	out	0x02, r24	; 2
	//	}
		forward();
		velocity(vel,vel);
	}
	else if (centre_line < 0x12) {
		forward();velocity(vel, vel); buzzer_off();// on the line, continue following it
    12c6:	80 91 0e 02 	lds	r24, 0x020E

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
    12ca:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
    12ce:	80 93 2a 01 	sts	0x012A, r24
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    12d2:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    12d4:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    12d6:	88 b9       	out	0x08, r24	; 8
    12d8:	84 ef       	ldi	r24, 0xF4	; 244
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	24 e1       	ldi	r18, 0x14	; 20
    12de:	31 e0       	ldi	r19, 0x01	; 1
    12e0:	f9 01       	movw	r30, r18
    12e2:	31 97       	sbiw	r30, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <lineFollow+0x774>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	d9 f7       	brne	.-10     	; 0x12e0 <lineFollow+0x772>
	}
	else if (centre_line < 0x12) {
		forward();velocity(vel, vel); buzzer_off();// on the line, continue following it
	}
	_delay_ms(50);
}
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	08 95       	ret

000012fa <main>:

int main(){

	init_devices();
    12fa:	0e 94 91 04 	call	0x922	; 0x922 <init_devices>

	lcd_set_4bit();
    12fe:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    1302:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>




void uart0_init(void){
  UCSR0B = 0x00; //disable while setting baud rate
    1306:	10 92 c1 00 	sts	0x00C1, r1
  UCSR0A = 0x00;
    130a:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0C = 0x06;
    130e:	86 e0       	ldi	r24, 0x06	; 6
    1310:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = 0x47; //set baud rate lo
    1314:	87 e4       	ldi	r24, 0x47	; 71
    1316:	80 93 c4 00 	sts	0x00C4, r24
  UBRR0H = 0x00; //set baud rate hi
    131a:	10 92 c5 00 	sts	0x00C5, r1
  UCSR0B = 0x98;
    131e:	88 e9       	ldi	r24, 0x98	; 152
    1320:	80 93 c1 00 	sts	0x00C1, r24
	init_devices();

	lcd_set_4bit();
	lcd_init();
	uart0_init();
	lcd_string("IR6 IR7 IR8");
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_string>
    132c:	80 e3       	ldi	r24, 0x30	; 48
    132e:	95 e7       	ldi	r25, 0x75	; 117
    1330:	24 e1       	ldi	r18, 0x14	; 20
    1332:	31 e0       	ldi	r19, 0x01	; 1
    1334:	f9 01       	movw	r30, r18
    1336:	31 97       	sbiw	r30, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133c:	d9 f7       	brne	.-10     	; 0x1334 <main+0x3a>
	_delay_ms(3000);
		

	PORTA = 0x06;
    133e:	86 e0       	ldi	r24, 0x06	; 6
    1340:	82 b9       	out	0x02, r24	; 2
	velocity(vel,vel);
    1342:	80 91 0e 02 	lds	r24, 0x020E

//To set wheel velocities
void velocity(unsigned char left_motion, unsigned char right_motion) {
	if (left_motion > 255) left_motion = 255;
	if (right_motion > 255) right_motion = 255;
	OCR5AL = (unsigned char)left_motion;
    1346:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motion;
    134a:	80 93 2a 01 	sts	0x012A, r24
	_delay_ms(3000);
		

	PORTA = 0x06;
	velocity(vel,vel);
	count=0;
    134e:	10 92 66 03 	sts	0x0366, r1
    1352:	10 92 65 03 	sts	0x0365, r1
	i=0;
    1356:	10 92 5a 03 	sts	0x035A, r1
    135a:	10 92 59 03 	sts	0x0359, r1
	skipLanes[2] = 3;*/


	while(1){
//move = 1;
	if(move==1){
    135e:	80 91 24 03 	lds	r24, 0x0324
    1362:	90 91 25 03 	lds	r25, 0x0325
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	d1 f4       	brne	.+52     	; 0x139e <main+0xa4>
		curTurningLane = turningLane[i];
    136a:	a0 91 59 03 	lds	r26, 0x0359
    136e:	b0 91 5a 03 	lds	r27, 0x035A
    1372:	fd 01       	movw	r30, r26
    1374:	ec 5c       	subi	r30, 0xCC	; 204
    1376:	fc 4f       	sbci	r31, 0xFC	; 252
    1378:	80 81       	ld	r24, Z
    137a:	80 93 63 03 	sts	0x0363, r24
    137e:	10 92 64 03 	sts	0x0364, r1
		turn curTurn = t[i];
    1382:	fd 01       	movw	r30, r26
    1384:	e6 5d       	subi	r30, 0xD6	; 214
    1386:	fc 4f       	sbci	r31, 0xFC	; 252
    1388:	80 81       	ld	r24, Z
		skip_lanes = skipLanes[i];
    138a:	a1 5b       	subi	r26, 0xB1	; 177
    138c:	bc 4f       	sbci	r27, 0xFC	; 252
    138e:	9c 91       	ld	r25, X
    1390:	90 93 0c 02 	sts	0x020C, r25
    1394:	10 92 0d 02 	sts	0x020D, r1
		//lcd_print(2, 1, vel, 3);
		lineFollow(curTurn);
    1398:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lineFollow>
    139c:	e0 cf       	rjmp	.-64     	; 0x135e <main+0x64>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    139e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    13a0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
    13a2:	82 b9       	out	0x02, r24	; 2
    13a4:	dc cf       	rjmp	.-72     	; 0x135e <main+0x64>

000013a6 <Sharp_GP2D12_estimation>:
	OCR5AL = (unsigned char)left_motion;
	OCR5BL = (unsigned char)right_motion;
}	

//To calculate sensor values
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading){
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17

	float distance;
	distance = (int)(10.00*(2799.6* (1/pow(adc_reading, 1.1546))));
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 e0       	ldi	r26, 0x00	; 0
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__floatunsisf>
    13bc:	2f ee       	ldi	r18, 0xEF	; 239
    13be:	39 ec       	ldi	r19, 0xC9	; 201
    13c0:	43 e9       	ldi	r20, 0x93	; 147
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <pow>
    13c8:	9b 01       	movw	r18, r22
    13ca:	ac 01       	movw	r20, r24
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	80 e8       	ldi	r24, 0x80	; 128
    13d2:	9f e3       	ldi	r25, 0x3F	; 63
    13d4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
    13d8:	2a e9       	ldi	r18, 0x9A	; 154
    13da:	39 ef       	ldi	r19, 0xF9	; 249
    13dc:	4e e2       	ldi	r20, 0x2E	; 46
    13de:	55 e4       	ldi	r21, 0x45	; 69
    13e0:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
    13f0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fixsfsi>
    13f4:	88 27       	eor	r24, r24
    13f6:	77 fd       	sbrc	r23, 7
    13f8:	80 95       	com	r24
    13fa:	98 2f       	mov	r25, r24
    13fc:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__floatsisf>
    1400:	7b 01       	movw	r14, r22
    1402:	8c 01       	movw	r16, r24
	int distanceInt = (int) distance;

	if(distance>800){
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	48 e4       	ldi	r20, 0x48	; 72
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	1c f4       	brge	.+6      	; 0x141a <Sharp_GP2D12_estimation+0x74>
    1414:	60 e2       	ldi	r22, 0x20	; 32
    1416:	73 e0       	ldi	r23, 0x03	; 3
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <Sharp_GP2D12_estimation+0x7c>
//To calculate sensor values
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading){

	float distance;
	distance = (int)(10.00*(2799.6* (1/pow(adc_reading, 1.1546))));
	int distanceInt = (int) distance;
    141a:	c8 01       	movw	r24, r16
    141c:	b7 01       	movw	r22, r14
    141e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fixsfsi>
	if(distance>800){
		distanceInt = 800;
	}

	return distanceInt;
}
    1422:	cb 01       	movw	r24, r22
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	08 95       	ret

0000142e <__fixunssfsi>:
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	7b 01       	movw	r14, r22
    1438:	8c 01       	movw	r16, r24
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	5f e4       	ldi	r21, 0x4F	; 79
    1442:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__gesf2>
    1446:	88 23       	and	r24, r24
    1448:	8c f0       	brlt	.+34     	; 0x146c <__fixunssfsi+0x3e>
    144a:	c8 01       	movw	r24, r16
    144c:	b7 01       	movw	r22, r14
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	5f e4       	ldi	r21, 0x4F	; 79
    1456:	0e 94 8f 0b 	call	0x171e	; 0x171e <__subsf3>
    145a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fixsfsi>
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	20 50       	subi	r18, 0x00	; 0
    1464:	30 40       	sbci	r19, 0x00	; 0
    1466:	40 40       	sbci	r20, 0x00	; 0
    1468:	50 48       	sbci	r21, 0x80	; 128
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <__fixunssfsi+0x4a>
    146c:	c8 01       	movw	r24, r16
    146e:	b7 01       	movw	r22, r14
    1470:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fixsfsi>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	b9 01       	movw	r22, r18
    147a:	ca 01       	movw	r24, r20
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	08 95       	ret

00001486 <_fpadd_parts>:
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e9 e4       	ldi	r30, 0x49	; 73
    148c:	fa e0       	ldi	r31, 0x0A	; 10
    148e:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__>
    1492:	dc 01       	movw	r26, r24
    1494:	2b 01       	movw	r4, r22
    1496:	fa 01       	movw	r30, r20
    1498:	9c 91       	ld	r25, X
    149a:	92 30       	cpi	r25, 0x02	; 2
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <_fpadd_parts+0x1a>
    149e:	39 c1       	rjmp	.+626    	; 0x1712 <_fpadd_parts+0x28c>
    14a0:	eb 01       	movw	r28, r22
    14a2:	88 81       	ld	r24, Y
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <_fpadd_parts+0x24>
    14a8:	33 c1       	rjmp	.+614    	; 0x1710 <_fpadd_parts+0x28a>
    14aa:	94 30       	cpi	r25, 0x04	; 4
    14ac:	69 f4       	brne	.+26     	; 0x14c8 <_fpadd_parts+0x42>
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <_fpadd_parts+0x2e>
    14b2:	2f c1       	rjmp	.+606    	; 0x1712 <_fpadd_parts+0x28c>
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 91       	ld	r25, X
    14b8:	11 97       	sbiw	r26, 0x01	; 1
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	98 17       	cp	r25, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <_fpadd_parts+0x3c>
    14c0:	28 c1       	rjmp	.+592    	; 0x1712 <_fpadd_parts+0x28c>
    14c2:	a0 e1       	ldi	r26, 0x10	; 16
    14c4:	b2 e0       	ldi	r27, 0x02	; 2
    14c6:	25 c1       	rjmp	.+586    	; 0x1712 <_fpadd_parts+0x28c>
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	09 f4       	brne	.+2      	; 0x14ce <_fpadd_parts+0x48>
    14cc:	21 c1       	rjmp	.+578    	; 0x1710 <_fpadd_parts+0x28a>
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	a9 f4       	brne	.+42     	; 0x14fc <_fpadd_parts+0x76>
    14d2:	92 30       	cpi	r25, 0x02	; 2
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <_fpadd_parts+0x52>
    14d6:	1d c1       	rjmp	.+570    	; 0x1712 <_fpadd_parts+0x28c>
    14d8:	9a 01       	movw	r18, r20
    14da:	ad 01       	movw	r20, r26
    14dc:	88 e0       	ldi	r24, 0x08	; 8
    14de:	ea 01       	movw	r28, r20
    14e0:	09 90       	ld	r0, Y+
    14e2:	ae 01       	movw	r20, r28
    14e4:	e9 01       	movw	r28, r18
    14e6:	09 92       	st	Y+, r0
    14e8:	9e 01       	movw	r18, r28
    14ea:	81 50       	subi	r24, 0x01	; 1
    14ec:	c1 f7       	brne	.-16     	; 0x14de <_fpadd_parts+0x58>
    14ee:	e2 01       	movw	r28, r4
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	9c 91       	ld	r25, X
    14f6:	89 23       	and	r24, r25
    14f8:	81 83       	std	Z+1, r24	; 0x01
    14fa:	08 c1       	rjmp	.+528    	; 0x170c <_fpadd_parts+0x286>
    14fc:	92 30       	cpi	r25, 0x02	; 2
    14fe:	09 f4       	brne	.+2      	; 0x1502 <_fpadd_parts+0x7c>
    1500:	07 c1       	rjmp	.+526    	; 0x1710 <_fpadd_parts+0x28a>
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	2d 90       	ld	r2, X+
    1506:	3c 90       	ld	r3, X
    1508:	13 97       	sbiw	r26, 0x03	; 3
    150a:	eb 01       	movw	r28, r22
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	14 96       	adiw	r26, 0x04	; 4
    1512:	ad 90       	ld	r10, X+
    1514:	bd 90       	ld	r11, X+
    1516:	cd 90       	ld	r12, X+
    1518:	dc 90       	ld	r13, X
    151a:	17 97       	sbiw	r26, 0x07	; 7
    151c:	ec 80       	ldd	r14, Y+4	; 0x04
    151e:	fd 80       	ldd	r15, Y+5	; 0x05
    1520:	0e 81       	ldd	r16, Y+6	; 0x06
    1522:	1f 81       	ldd	r17, Y+7	; 0x07
    1524:	91 01       	movw	r18, r2
    1526:	28 1b       	sub	r18, r24
    1528:	39 0b       	sbc	r19, r25
    152a:	b9 01       	movw	r22, r18
    152c:	37 ff       	sbrs	r19, 7
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <_fpadd_parts+0xb2>
    1530:	66 27       	eor	r22, r22
    1532:	77 27       	eor	r23, r23
    1534:	62 1b       	sub	r22, r18
    1536:	73 0b       	sbc	r23, r19
    1538:	60 32       	cpi	r22, 0x20	; 32
    153a:	71 05       	cpc	r23, r1
    153c:	0c f0       	brlt	.+2      	; 0x1540 <_fpadd_parts+0xba>
    153e:	61 c0       	rjmp	.+194    	; 0x1602 <_fpadd_parts+0x17c>
    1540:	12 16       	cp	r1, r18
    1542:	13 06       	cpc	r1, r19
    1544:	6c f5       	brge	.+90     	; 0x15a0 <_fpadd_parts+0x11a>
    1546:	37 01       	movw	r6, r14
    1548:	48 01       	movw	r8, r16
    154a:	06 2e       	mov	r0, r22
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <_fpadd_parts+0xd0>
    154e:	96 94       	lsr	r9
    1550:	87 94       	ror	r8
    1552:	77 94       	ror	r7
    1554:	67 94       	ror	r6
    1556:	0a 94       	dec	r0
    1558:	d2 f7       	brpl	.-12     	; 0x154e <_fpadd_parts+0xc8>
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	04 c0       	rjmp	.+8      	; 0x156c <_fpadd_parts+0xe6>
    1564:	22 0f       	add	r18, r18
    1566:	33 1f       	adc	r19, r19
    1568:	44 1f       	adc	r20, r20
    156a:	55 1f       	adc	r21, r21
    156c:	6a 95       	dec	r22
    156e:	d2 f7       	brpl	.-12     	; 0x1564 <_fpadd_parts+0xde>
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	30 40       	sbci	r19, 0x00	; 0
    1574:	40 40       	sbci	r20, 0x00	; 0
    1576:	50 40       	sbci	r21, 0x00	; 0
    1578:	2e 21       	and	r18, r14
    157a:	3f 21       	and	r19, r15
    157c:	40 23       	and	r20, r16
    157e:	51 23       	and	r21, r17
    1580:	21 15       	cp	r18, r1
    1582:	31 05       	cpc	r19, r1
    1584:	41 05       	cpc	r20, r1
    1586:	51 05       	cpc	r21, r1
    1588:	21 f0       	breq	.+8      	; 0x1592 <_fpadd_parts+0x10c>
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	79 01       	movw	r14, r18
    1594:	8a 01       	movw	r16, r20
    1596:	e6 28       	or	r14, r6
    1598:	f7 28       	or	r15, r7
    159a:	08 29       	or	r16, r8
    159c:	19 29       	or	r17, r9
    159e:	3c c0       	rjmp	.+120    	; 0x1618 <_fpadd_parts+0x192>
    15a0:	23 2b       	or	r18, r19
    15a2:	d1 f1       	breq	.+116    	; 0x1618 <_fpadd_parts+0x192>
    15a4:	26 0e       	add	r2, r22
    15a6:	37 1e       	adc	r3, r23
    15a8:	35 01       	movw	r6, r10
    15aa:	46 01       	movw	r8, r12
    15ac:	06 2e       	mov	r0, r22
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <_fpadd_parts+0x132>
    15b0:	96 94       	lsr	r9
    15b2:	87 94       	ror	r8
    15b4:	77 94       	ror	r7
    15b6:	67 94       	ror	r6
    15b8:	0a 94       	dec	r0
    15ba:	d2 f7       	brpl	.-12     	; 0x15b0 <_fpadd_parts+0x12a>
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <_fpadd_parts+0x148>
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	44 1f       	adc	r20, r20
    15cc:	55 1f       	adc	r21, r21
    15ce:	6a 95       	dec	r22
    15d0:	d2 f7       	brpl	.-12     	; 0x15c6 <_fpadd_parts+0x140>
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	30 40       	sbci	r19, 0x00	; 0
    15d6:	40 40       	sbci	r20, 0x00	; 0
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	2a 21       	and	r18, r10
    15dc:	3b 21       	and	r19, r11
    15de:	4c 21       	and	r20, r12
    15e0:	5d 21       	and	r21, r13
    15e2:	21 15       	cp	r18, r1
    15e4:	31 05       	cpc	r19, r1
    15e6:	41 05       	cpc	r20, r1
    15e8:	51 05       	cpc	r21, r1
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <_fpadd_parts+0x16e>
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	59 01       	movw	r10, r18
    15f6:	6a 01       	movw	r12, r20
    15f8:	a6 28       	or	r10, r6
    15fa:	b7 28       	or	r11, r7
    15fc:	c8 28       	or	r12, r8
    15fe:	d9 28       	or	r13, r9
    1600:	0b c0       	rjmp	.+22     	; 0x1618 <_fpadd_parts+0x192>
    1602:	82 15       	cp	r24, r2
    1604:	93 05       	cpc	r25, r3
    1606:	2c f0       	brlt	.+10     	; 0x1612 <_fpadd_parts+0x18c>
    1608:	1c 01       	movw	r2, r24
    160a:	aa 24       	eor	r10, r10
    160c:	bb 24       	eor	r11, r11
    160e:	65 01       	movw	r12, r10
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <_fpadd_parts+0x192>
    1612:	ee 24       	eor	r14, r14
    1614:	ff 24       	eor	r15, r15
    1616:	87 01       	movw	r16, r14
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 91       	ld	r25, X
    161c:	d2 01       	movw	r26, r4
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	8c 91       	ld	r24, X
    1622:	98 17       	cp	r25, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <_fpadd_parts+0x1a2>
    1626:	45 c0       	rjmp	.+138    	; 0x16b2 <_fpadd_parts+0x22c>
    1628:	99 23       	and	r25, r25
    162a:	39 f0       	breq	.+14     	; 0x163a <_fpadd_parts+0x1b4>
    162c:	a8 01       	movw	r20, r16
    162e:	97 01       	movw	r18, r14
    1630:	2a 19       	sub	r18, r10
    1632:	3b 09       	sbc	r19, r11
    1634:	4c 09       	sbc	r20, r12
    1636:	5d 09       	sbc	r21, r13
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <_fpadd_parts+0x1c0>
    163a:	a6 01       	movw	r20, r12
    163c:	95 01       	movw	r18, r10
    163e:	2e 19       	sub	r18, r14
    1640:	3f 09       	sbc	r19, r15
    1642:	40 0b       	sbc	r20, r16
    1644:	51 0b       	sbc	r21, r17
    1646:	57 fd       	sbrc	r21, 7
    1648:	08 c0       	rjmp	.+16     	; 0x165a <_fpadd_parts+0x1d4>
    164a:	11 82       	std	Z+1, r1	; 0x01
    164c:	33 82       	std	Z+3, r3	; 0x03
    164e:	22 82       	std	Z+2, r2	; 0x02
    1650:	24 83       	std	Z+4, r18	; 0x04
    1652:	35 83       	std	Z+5, r19	; 0x05
    1654:	46 83       	std	Z+6, r20	; 0x06
    1656:	57 83       	std	Z+7, r21	; 0x07
    1658:	1d c0       	rjmp	.+58     	; 0x1694 <_fpadd_parts+0x20e>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	81 83       	std	Z+1, r24	; 0x01
    165e:	33 82       	std	Z+3, r3	; 0x03
    1660:	22 82       	std	Z+2, r2	; 0x02
    1662:	88 27       	eor	r24, r24
    1664:	99 27       	eor	r25, r25
    1666:	dc 01       	movw	r26, r24
    1668:	82 1b       	sub	r24, r18
    166a:	93 0b       	sbc	r25, r19
    166c:	a4 0b       	sbc	r26, r20
    166e:	b5 0b       	sbc	r27, r21
    1670:	84 83       	std	Z+4, r24	; 0x04
    1672:	95 83       	std	Z+5, r25	; 0x05
    1674:	a6 83       	std	Z+6, r26	; 0x06
    1676:	b7 83       	std	Z+7, r27	; 0x07
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <_fpadd_parts+0x20e>
    167a:	22 0f       	add	r18, r18
    167c:	33 1f       	adc	r19, r19
    167e:	44 1f       	adc	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	24 83       	std	Z+4, r18	; 0x04
    1684:	35 83       	std	Z+5, r19	; 0x05
    1686:	46 83       	std	Z+6, r20	; 0x06
    1688:	57 83       	std	Z+7, r21	; 0x07
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	93 83       	std	Z+3, r25	; 0x03
    1692:	82 83       	std	Z+2, r24	; 0x02
    1694:	24 81       	ldd	r18, Z+4	; 0x04
    1696:	35 81       	ldd	r19, Z+5	; 0x05
    1698:	46 81       	ldd	r20, Z+6	; 0x06
    169a:	57 81       	ldd	r21, Z+7	; 0x07
    169c:	da 01       	movw	r26, r20
    169e:	c9 01       	movw	r24, r18
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b1 09       	sbc	r27, r1
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	af 4f       	sbci	r26, 0xFF	; 255
    16ac:	bf 43       	sbci	r27, 0x3F	; 63
    16ae:	28 f3       	brcs	.-54     	; 0x167a <_fpadd_parts+0x1f4>
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <_fpadd_parts+0x242>
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	33 82       	std	Z+3, r3	; 0x03
    16b6:	22 82       	std	Z+2, r2	; 0x02
    16b8:	ea 0c       	add	r14, r10
    16ba:	fb 1c       	adc	r15, r11
    16bc:	0c 1d       	adc	r16, r12
    16be:	1d 1d       	adc	r17, r13
    16c0:	e4 82       	std	Z+4, r14	; 0x04
    16c2:	f5 82       	std	Z+5, r15	; 0x05
    16c4:	06 83       	std	Z+6, r16	; 0x06
    16c6:	17 83       	std	Z+7, r17	; 0x07
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	80 83       	st	Z, r24
    16cc:	24 81       	ldd	r18, Z+4	; 0x04
    16ce:	35 81       	ldd	r19, Z+5	; 0x05
    16d0:	46 81       	ldd	r20, Z+6	; 0x06
    16d2:	57 81       	ldd	r21, Z+7	; 0x07
    16d4:	57 ff       	sbrs	r21, 7
    16d6:	1a c0       	rjmp	.+52     	; 0x170c <_fpadd_parts+0x286>
    16d8:	c9 01       	movw	r24, r18
    16da:	aa 27       	eor	r26, r26
    16dc:	97 fd       	sbrc	r25, 7
    16de:	a0 95       	com	r26
    16e0:	ba 2f       	mov	r27, r26
    16e2:	81 70       	andi	r24, 0x01	; 1
    16e4:	90 70       	andi	r25, 0x00	; 0
    16e6:	a0 70       	andi	r26, 0x00	; 0
    16e8:	b0 70       	andi	r27, 0x00	; 0
    16ea:	56 95       	lsr	r21
    16ec:	47 95       	ror	r20
    16ee:	37 95       	ror	r19
    16f0:	27 95       	ror	r18
    16f2:	82 2b       	or	r24, r18
    16f4:	93 2b       	or	r25, r19
    16f6:	a4 2b       	or	r26, r20
    16f8:	b5 2b       	or	r27, r21
    16fa:	84 83       	std	Z+4, r24	; 0x04
    16fc:	95 83       	std	Z+5, r25	; 0x05
    16fe:	a6 83       	std	Z+6, r26	; 0x06
    1700:	b7 83       	std	Z+7, r27	; 0x07
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	93 83       	std	Z+3, r25	; 0x03
    170a:	82 83       	std	Z+2, r24	; 0x02
    170c:	df 01       	movw	r26, r30
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <_fpadd_parts+0x28c>
    1710:	d2 01       	movw	r26, r4
    1712:	cd 01       	movw	r24, r26
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	e2 e1       	ldi	r30, 0x12	; 18
    171a:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__>

0000171e <__subsf3>:
    171e:	a0 e2       	ldi	r26, 0x20	; 32
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e9       	ldi	r30, 0x95	; 149
    1724:	fb e0       	ldi	r31, 0x0B	; 11
    1726:	0c 94 46 11 	jmp	0x228c	; 0x228c <__prologue_saves__+0x18>
    172a:	69 83       	std	Y+1, r22	; 0x01
    172c:	7a 83       	std	Y+2, r23	; 0x02
    172e:	8b 83       	std	Y+3, r24	; 0x03
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	2d 83       	std	Y+5, r18	; 0x05
    1734:	3e 83       	std	Y+6, r19	; 0x06
    1736:	4f 83       	std	Y+7, r20	; 0x07
    1738:	58 87       	std	Y+8, r21	; 0x08
    173a:	e9 e0       	ldi	r30, 0x09	; 9
    173c:	ee 2e       	mov	r14, r30
    173e:	f1 2c       	mov	r15, r1
    1740:	ec 0e       	add	r14, r28
    1742:	fd 1e       	adc	r15, r29
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	b7 01       	movw	r22, r14
    174a:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    174e:	8e 01       	movw	r16, r28
    1750:	0f 5e       	subi	r16, 0xEF	; 239
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	ce 01       	movw	r24, r28
    1756:	05 96       	adiw	r24, 0x05	; 5
    1758:	b8 01       	movw	r22, r16
    175a:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    175e:	8a 89       	ldd	r24, Y+18	; 0x12
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	89 27       	eor	r24, r25
    1764:	8a 8b       	std	Y+18, r24	; 0x12
    1766:	c7 01       	movw	r24, r14
    1768:	b8 01       	movw	r22, r16
    176a:	ae 01       	movw	r20, r28
    176c:	47 5e       	subi	r20, 0xE7	; 231
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	0e 94 43 0a 	call	0x1486	; 0x1486 <_fpadd_parts>
    1774:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__pack_f>
    1778:	a0 96       	adiw	r28, 0x20	; 32
    177a:	e6 e0       	ldi	r30, 0x06	; 6
    177c:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__epilogue_restores__+0x18>

00001780 <__addsf3>:
    1780:	a0 e2       	ldi	r26, 0x20	; 32
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 ec       	ldi	r30, 0xC6	; 198
    1786:	fb e0       	ldi	r31, 0x0B	; 11
    1788:	0c 94 46 11 	jmp	0x228c	; 0x228c <__prologue_saves__+0x18>
    178c:	69 83       	std	Y+1, r22	; 0x01
    178e:	7a 83       	std	Y+2, r23	; 0x02
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	2d 83       	std	Y+5, r18	; 0x05
    1796:	3e 83       	std	Y+6, r19	; 0x06
    1798:	4f 83       	std	Y+7, r20	; 0x07
    179a:	58 87       	std	Y+8, r21	; 0x08
    179c:	f9 e0       	ldi	r31, 0x09	; 9
    179e:	ef 2e       	mov	r14, r31
    17a0:	f1 2c       	mov	r15, r1
    17a2:	ec 0e       	add	r14, r28
    17a4:	fd 1e       	adc	r15, r29
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	b7 01       	movw	r22, r14
    17ac:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    17b0:	8e 01       	movw	r16, r28
    17b2:	0f 5e       	subi	r16, 0xEF	; 239
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	ce 01       	movw	r24, r28
    17b8:	05 96       	adiw	r24, 0x05	; 5
    17ba:	b8 01       	movw	r22, r16
    17bc:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    17c0:	c7 01       	movw	r24, r14
    17c2:	b8 01       	movw	r22, r16
    17c4:	ae 01       	movw	r20, r28
    17c6:	47 5e       	subi	r20, 0xE7	; 231
    17c8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ca:	0e 94 43 0a 	call	0x1486	; 0x1486 <_fpadd_parts>
    17ce:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__pack_f>
    17d2:	a0 96       	adiw	r28, 0x20	; 32
    17d4:	e6 e0       	ldi	r30, 0x06	; 6
    17d6:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__epilogue_restores__+0x18>

000017da <__mulsf3>:
    17da:	a0 e2       	ldi	r26, 0x20	; 32
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 ef       	ldi	r30, 0xF3	; 243
    17e0:	fb e0       	ldi	r31, 0x0B	; 11
    17e2:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__>
    17e6:	69 83       	std	Y+1, r22	; 0x01
    17e8:	7a 83       	std	Y+2, r23	; 0x02
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	2d 83       	std	Y+5, r18	; 0x05
    17f0:	3e 83       	std	Y+6, r19	; 0x06
    17f2:	4f 83       	std	Y+7, r20	; 0x07
    17f4:	58 87       	std	Y+8, r21	; 0x08
    17f6:	ce 01       	movw	r24, r28
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	be 01       	movw	r22, r28
    17fc:	67 5f       	subi	r22, 0xF7	; 247
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1804:	ce 01       	movw	r24, r28
    1806:	05 96       	adiw	r24, 0x05	; 5
    1808:	be 01       	movw	r22, r28
    180a:	6f 5e       	subi	r22, 0xEF	; 239
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1812:	99 85       	ldd	r25, Y+9	; 0x09
    1814:	92 30       	cpi	r25, 0x02	; 2
    1816:	88 f0       	brcs	.+34     	; 0x183a <__mulsf3+0x60>
    1818:	89 89       	ldd	r24, Y+17	; 0x11
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	c8 f0       	brcs	.+50     	; 0x1850 <__mulsf3+0x76>
    181e:	94 30       	cpi	r25, 0x04	; 4
    1820:	19 f4       	brne	.+6      	; 0x1828 <__mulsf3+0x4e>
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	51 f4       	brne	.+20     	; 0x183a <__mulsf3+0x60>
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <__mulsf3+0x56>
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	29 f4       	brne	.+10     	; 0x1836 <__mulsf3+0x5c>
    182c:	92 30       	cpi	r25, 0x02	; 2
    182e:	81 f4       	brne	.+32     	; 0x1850 <__mulsf3+0x76>
    1830:	80 e1       	ldi	r24, 0x10	; 16
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	c6 c0       	rjmp	.+396    	; 0x19c2 <__mulsf3+0x1e8>
    1836:	92 30       	cpi	r25, 0x02	; 2
    1838:	49 f4       	brne	.+18     	; 0x184c <__mulsf3+0x72>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	8a 89       	ldd	r24, Y+18	; 0x12
    1840:	98 13       	cpse	r25, r24
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	2a 87       	std	Y+10, r18	; 0x0a
    1846:	ce 01       	movw	r24, r28
    1848:	09 96       	adiw	r24, 0x09	; 9
    184a:	bb c0       	rjmp	.+374    	; 0x19c2 <__mulsf3+0x1e8>
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	49 f4       	brne	.+18     	; 0x1862 <__mulsf3+0x88>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	8a 89       	ldd	r24, Y+18	; 0x12
    1856:	98 13       	cpse	r25, r24
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	2a 8b       	std	Y+18, r18	; 0x12
    185c:	ce 01       	movw	r24, r28
    185e:	41 96       	adiw	r24, 0x11	; 17
    1860:	b0 c0       	rjmp	.+352    	; 0x19c2 <__mulsf3+0x1e8>
    1862:	2d 84       	ldd	r2, Y+13	; 0x0d
    1864:	3e 84       	ldd	r3, Y+14	; 0x0e
    1866:	4f 84       	ldd	r4, Y+15	; 0x0f
    1868:	58 88       	ldd	r5, Y+16	; 0x10
    186a:	6d 88       	ldd	r6, Y+21	; 0x15
    186c:	7e 88       	ldd	r7, Y+22	; 0x16
    186e:	8f 88       	ldd	r8, Y+23	; 0x17
    1870:	98 8c       	ldd	r9, Y+24	; 0x18
    1872:	ee 24       	eor	r14, r14
    1874:	ff 24       	eor	r15, r15
    1876:	87 01       	movw	r16, r14
    1878:	aa 24       	eor	r10, r10
    187a:	bb 24       	eor	r11, r11
    187c:	65 01       	movw	r12, r10
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	e0 e0       	ldi	r30, 0x00	; 0
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	c1 01       	movw	r24, r2
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	90 70       	andi	r25, 0x00	; 0
    1890:	89 2b       	or	r24, r25
    1892:	e9 f0       	breq	.+58     	; 0x18ce <__mulsf3+0xf4>
    1894:	e6 0c       	add	r14, r6
    1896:	f7 1c       	adc	r15, r7
    1898:	08 1d       	adc	r16, r8
    189a:	19 1d       	adc	r17, r9
    189c:	9a 01       	movw	r18, r20
    189e:	ab 01       	movw	r20, r22
    18a0:	2a 0d       	add	r18, r10
    18a2:	3b 1d       	adc	r19, r11
    18a4:	4c 1d       	adc	r20, r12
    18a6:	5d 1d       	adc	r21, r13
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e6 14       	cp	r14, r6
    18b2:	f7 04       	cpc	r15, r7
    18b4:	08 05       	cpc	r16, r8
    18b6:	19 05       	cpc	r17, r9
    18b8:	20 f4       	brcc	.+8      	; 0x18c2 <__mulsf3+0xe8>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ba 01       	movw	r22, r20
    18c4:	a9 01       	movw	r20, r18
    18c6:	48 0f       	add	r20, r24
    18c8:	59 1f       	adc	r21, r25
    18ca:	6a 1f       	adc	r22, r26
    18cc:	7b 1f       	adc	r23, r27
    18ce:	aa 0c       	add	r10, r10
    18d0:	bb 1c       	adc	r11, r11
    18d2:	cc 1c       	adc	r12, r12
    18d4:	dd 1c       	adc	r13, r13
    18d6:	97 fe       	sbrs	r9, 7
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <__mulsf3+0x110>
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	a8 2a       	or	r10, r24
    18e4:	b9 2a       	or	r11, r25
    18e6:	ca 2a       	or	r12, r26
    18e8:	db 2a       	or	r13, r27
    18ea:	31 96       	adiw	r30, 0x01	; 1
    18ec:	e0 32       	cpi	r30, 0x20	; 32
    18ee:	f1 05       	cpc	r31, r1
    18f0:	49 f0       	breq	.+18     	; 0x1904 <__mulsf3+0x12a>
    18f2:	66 0c       	add	r6, r6
    18f4:	77 1c       	adc	r7, r7
    18f6:	88 1c       	adc	r8, r8
    18f8:	99 1c       	adc	r9, r9
    18fa:	56 94       	lsr	r5
    18fc:	47 94       	ror	r4
    18fe:	37 94       	ror	r3
    1900:	27 94       	ror	r2
    1902:	c3 cf       	rjmp	.-122    	; 0x188a <__mulsf3+0xb0>
    1904:	fa 85       	ldd	r31, Y+10	; 0x0a
    1906:	ea 89       	ldd	r30, Y+18	; 0x12
    1908:	2b 89       	ldd	r18, Y+19	; 0x13
    190a:	3c 89       	ldd	r19, Y+20	; 0x14
    190c:	8b 85       	ldd	r24, Y+11	; 0x0b
    190e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1910:	28 0f       	add	r18, r24
    1912:	39 1f       	adc	r19, r25
    1914:	2e 5f       	subi	r18, 0xFE	; 254
    1916:	3f 4f       	sbci	r19, 0xFF	; 255
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <__mulsf3+0x16e>
    191a:	ca 01       	movw	r24, r20
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	89 2b       	or	r24, r25
    1922:	61 f0       	breq	.+24     	; 0x193c <__mulsf3+0x162>
    1924:	16 95       	lsr	r17
    1926:	07 95       	ror	r16
    1928:	f7 94       	ror	r15
    192a:	e7 94       	ror	r14
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e8       	ldi	r27, 0x80	; 128
    1934:	e8 2a       	or	r14, r24
    1936:	f9 2a       	or	r15, r25
    1938:	0a 2b       	or	r16, r26
    193a:	1b 2b       	or	r17, r27
    193c:	76 95       	lsr	r23
    193e:	67 95       	ror	r22
    1940:	57 95       	ror	r21
    1942:	47 95       	ror	r20
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	77 fd       	sbrc	r23, 7
    194a:	e7 cf       	rjmp	.-50     	; 0x191a <__mulsf3+0x140>
    194c:	0c c0       	rjmp	.+24     	; 0x1966 <__mulsf3+0x18c>
    194e:	44 0f       	add	r20, r20
    1950:	55 1f       	adc	r21, r21
    1952:	66 1f       	adc	r22, r22
    1954:	77 1f       	adc	r23, r23
    1956:	17 fd       	sbrc	r17, 7
    1958:	41 60       	ori	r20, 0x01	; 1
    195a:	ee 0c       	add	r14, r14
    195c:	ff 1c       	adc	r15, r15
    195e:	00 1f       	adc	r16, r16
    1960:	11 1f       	adc	r17, r17
    1962:	21 50       	subi	r18, 0x01	; 1
    1964:	30 40       	sbci	r19, 0x00	; 0
    1966:	40 30       	cpi	r20, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	59 07       	cpc	r21, r25
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	69 07       	cpc	r22, r25
    1970:	90 e4       	ldi	r25, 0x40	; 64
    1972:	79 07       	cpc	r23, r25
    1974:	60 f3       	brcs	.-40     	; 0x194e <__mulsf3+0x174>
    1976:	2b 8f       	std	Y+27, r18	; 0x1b
    1978:	3c 8f       	std	Y+28, r19	; 0x1c
    197a:	db 01       	movw	r26, r22
    197c:	ca 01       	movw	r24, r20
    197e:	8f 77       	andi	r24, 0x7F	; 127
    1980:	90 70       	andi	r25, 0x00	; 0
    1982:	a0 70       	andi	r26, 0x00	; 0
    1984:	b0 70       	andi	r27, 0x00	; 0
    1986:	80 34       	cpi	r24, 0x40	; 64
    1988:	91 05       	cpc	r25, r1
    198a:	a1 05       	cpc	r26, r1
    198c:	b1 05       	cpc	r27, r1
    198e:	61 f4       	brne	.+24     	; 0x19a8 <__mulsf3+0x1ce>
    1990:	47 fd       	sbrc	r20, 7
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <__mulsf3+0x1ce>
    1994:	e1 14       	cp	r14, r1
    1996:	f1 04       	cpc	r15, r1
    1998:	01 05       	cpc	r16, r1
    199a:	11 05       	cpc	r17, r1
    199c:	29 f0       	breq	.+10     	; 0x19a8 <__mulsf3+0x1ce>
    199e:	40 5c       	subi	r20, 0xC0	; 192
    19a0:	5f 4f       	sbci	r21, 0xFF	; 255
    19a2:	6f 4f       	sbci	r22, 0xFF	; 255
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	40 78       	andi	r20, 0x80	; 128
    19a8:	1a 8e       	std	Y+26, r1	; 0x1a
    19aa:	fe 17       	cp	r31, r30
    19ac:	11 f0       	breq	.+4      	; 0x19b2 <__mulsf3+0x1d8>
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	8a 8f       	std	Y+26, r24	; 0x1a
    19b2:	4d 8f       	std	Y+29, r20	; 0x1d
    19b4:	5e 8f       	std	Y+30, r21	; 0x1e
    19b6:	6f 8f       	std	Y+31, r22	; 0x1f
    19b8:	78 a3       	std	Y+32, r23	; 0x20
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	89 8f       	std	Y+25, r24	; 0x19
    19be:	ce 01       	movw	r24, r28
    19c0:	49 96       	adiw	r24, 0x19	; 25
    19c2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__pack_f>
    19c6:	a0 96       	adiw	r28, 0x20	; 32
    19c8:	e2 e1       	ldi	r30, 0x12	; 18
    19ca:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__>

000019ce <__divsf3>:
    19ce:	a8 e1       	ldi	r26, 0x18	; 24
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed ee       	ldi	r30, 0xED	; 237
    19d4:	fc e0       	ldi	r31, 0x0C	; 12
    19d6:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__prologue_saves__+0x10>
    19da:	69 83       	std	Y+1, r22	; 0x01
    19dc:	7a 83       	std	Y+2, r23	; 0x02
    19de:	8b 83       	std	Y+3, r24	; 0x03
    19e0:	9c 83       	std	Y+4, r25	; 0x04
    19e2:	2d 83       	std	Y+5, r18	; 0x05
    19e4:	3e 83       	std	Y+6, r19	; 0x06
    19e6:	4f 83       	std	Y+7, r20	; 0x07
    19e8:	58 87       	std	Y+8, r21	; 0x08
    19ea:	b9 e0       	ldi	r27, 0x09	; 9
    19ec:	eb 2e       	mov	r14, r27
    19ee:	f1 2c       	mov	r15, r1
    19f0:	ec 0e       	add	r14, r28
    19f2:	fd 1e       	adc	r15, r29
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	b7 01       	movw	r22, r14
    19fa:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    19fe:	8e 01       	movw	r16, r28
    1a00:	0f 5e       	subi	r16, 0xEF	; 239
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	ce 01       	movw	r24, r28
    1a06:	05 96       	adiw	r24, 0x05	; 5
    1a08:	b8 01       	movw	r22, r16
    1a0a:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1a0e:	29 85       	ldd	r18, Y+9	; 0x09
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	08 f4       	brcc	.+2      	; 0x1a16 <__divsf3+0x48>
    1a14:	7e c0       	rjmp	.+252    	; 0x1b12 <__divsf3+0x144>
    1a16:	39 89       	ldd	r19, Y+17	; 0x11
    1a18:	32 30       	cpi	r19, 0x02	; 2
    1a1a:	10 f4       	brcc	.+4      	; 0x1a20 <__divsf3+0x52>
    1a1c:	b8 01       	movw	r22, r16
    1a1e:	7c c0       	rjmp	.+248    	; 0x1b18 <__divsf3+0x14a>
    1a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a22:	9a 89       	ldd	r25, Y+18	; 0x12
    1a24:	89 27       	eor	r24, r25
    1a26:	8a 87       	std	Y+10, r24	; 0x0a
    1a28:	24 30       	cpi	r18, 0x04	; 4
    1a2a:	11 f0       	breq	.+4      	; 0x1a30 <__divsf3+0x62>
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 f4       	brne	.+12     	; 0x1a3c <__divsf3+0x6e>
    1a30:	23 17       	cp	r18, r19
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <__divsf3+0x68>
    1a34:	6e c0       	rjmp	.+220    	; 0x1b12 <__divsf3+0x144>
    1a36:	60 e1       	ldi	r22, 0x10	; 16
    1a38:	72 e0       	ldi	r23, 0x02	; 2
    1a3a:	6e c0       	rjmp	.+220    	; 0x1b18 <__divsf3+0x14a>
    1a3c:	34 30       	cpi	r19, 0x04	; 4
    1a3e:	39 f4       	brne	.+14     	; 0x1a4e <__divsf3+0x80>
    1a40:	1d 86       	std	Y+13, r1	; 0x0d
    1a42:	1e 86       	std	Y+14, r1	; 0x0e
    1a44:	1f 86       	std	Y+15, r1	; 0x0f
    1a46:	18 8a       	std	Y+16, r1	; 0x10
    1a48:	1c 86       	std	Y+12, r1	; 0x0c
    1a4a:	1b 86       	std	Y+11, r1	; 0x0b
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <__divsf3+0x88>
    1a4e:	32 30       	cpi	r19, 0x02	; 2
    1a50:	21 f4       	brne	.+8      	; 0x1a5a <__divsf3+0x8c>
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	89 87       	std	Y+9, r24	; 0x09
    1a56:	b7 01       	movw	r22, r14
    1a58:	5f c0       	rjmp	.+190    	; 0x1b18 <__divsf3+0x14a>
    1a5a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	28 1b       	sub	r18, r24
    1a64:	39 0b       	sbc	r19, r25
    1a66:	3c 87       	std	Y+12, r19	; 0x0c
    1a68:	2b 87       	std	Y+11, r18	; 0x0b
    1a6a:	ed 84       	ldd	r14, Y+13	; 0x0d
    1a6c:	fe 84       	ldd	r15, Y+14	; 0x0e
    1a6e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a70:	18 89       	ldd	r17, Y+16	; 0x10
    1a72:	ad 88       	ldd	r10, Y+21	; 0x15
    1a74:	be 88       	ldd	r11, Y+22	; 0x16
    1a76:	cf 88       	ldd	r12, Y+23	; 0x17
    1a78:	d8 8c       	ldd	r13, Y+24	; 0x18
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	40 f4       	brcc	.+16     	; 0x1a94 <__divsf3+0xc6>
    1a84:	ee 0c       	add	r14, r14
    1a86:	ff 1c       	adc	r15, r15
    1a88:	00 1f       	adc	r16, r16
    1a8a:	11 1f       	adc	r17, r17
    1a8c:	21 50       	subi	r18, 0x01	; 1
    1a8e:	30 40       	sbci	r19, 0x00	; 0
    1a90:	3c 87       	std	Y+12, r19	; 0x0c
    1a92:	2b 87       	std	Y+11, r18	; 0x0b
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e4       	ldi	r27, 0x40	; 64
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	ea 14       	cp	r14, r10
    1aaa:	fb 04       	cpc	r15, r11
    1aac:	0c 05       	cpc	r16, r12
    1aae:	1d 05       	cpc	r17, r13
    1ab0:	40 f0       	brcs	.+16     	; 0x1ac2 <__divsf3+0xf4>
    1ab2:	28 2b       	or	r18, r24
    1ab4:	39 2b       	or	r19, r25
    1ab6:	4a 2b       	or	r20, r26
    1ab8:	5b 2b       	or	r21, r27
    1aba:	ea 18       	sub	r14, r10
    1abc:	fb 08       	sbc	r15, r11
    1abe:	0c 09       	sbc	r16, r12
    1ac0:	1d 09       	sbc	r17, r13
    1ac2:	b6 95       	lsr	r27
    1ac4:	a7 95       	ror	r26
    1ac6:	97 95       	ror	r25
    1ac8:	87 95       	ror	r24
    1aca:	ee 0c       	add	r14, r14
    1acc:	ff 1c       	adc	r15, r15
    1ace:	00 1f       	adc	r16, r16
    1ad0:	11 1f       	adc	r17, r17
    1ad2:	6f 5f       	subi	r22, 0xFF	; 255
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	6f 31       	cpi	r22, 0x1F	; 31
    1ad8:	71 05       	cpc	r23, r1
    1ada:	31 f7       	brne	.-52     	; 0x1aa8 <__divsf3+0xda>
    1adc:	da 01       	movw	r26, r20
    1ade:	c9 01       	movw	r24, r18
    1ae0:	8f 77       	andi	r24, 0x7F	; 127
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	a0 70       	andi	r26, 0x00	; 0
    1ae6:	b0 70       	andi	r27, 0x00	; 0
    1ae8:	80 34       	cpi	r24, 0x40	; 64
    1aea:	91 05       	cpc	r25, r1
    1aec:	a1 05       	cpc	r26, r1
    1aee:	b1 05       	cpc	r27, r1
    1af0:	61 f4       	brne	.+24     	; 0x1b0a <__divsf3+0x13c>
    1af2:	27 fd       	sbrc	r18, 7
    1af4:	0a c0       	rjmp	.+20     	; 0x1b0a <__divsf3+0x13c>
    1af6:	e1 14       	cp	r14, r1
    1af8:	f1 04       	cpc	r15, r1
    1afa:	01 05       	cpc	r16, r1
    1afc:	11 05       	cpc	r17, r1
    1afe:	29 f0       	breq	.+10     	; 0x1b0a <__divsf3+0x13c>
    1b00:	20 5c       	subi	r18, 0xC0	; 192
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	4f 4f       	sbci	r20, 0xFF	; 255
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	20 78       	andi	r18, 0x80	; 128
    1b0a:	2d 87       	std	Y+13, r18	; 0x0d
    1b0c:	3e 87       	std	Y+14, r19	; 0x0e
    1b0e:	4f 87       	std	Y+15, r20	; 0x0f
    1b10:	58 8b       	std	Y+16, r21	; 0x10
    1b12:	be 01       	movw	r22, r28
    1b14:	67 5f       	subi	r22, 0xF7	; 247
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	cb 01       	movw	r24, r22
    1b1a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__pack_f>
    1b1e:	68 96       	adiw	r28, 0x18	; 24
    1b20:	ea e0       	ldi	r30, 0x0A	; 10
    1b22:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__epilogue_restores__+0x10>

00001b26 <__gtsf2>:
    1b26:	a8 e1       	ldi	r26, 0x18	; 24
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 46 11 	jmp	0x228c	; 0x228c <__prologue_saves__+0x18>
    1b32:	69 83       	std	Y+1, r22	; 0x01
    1b34:	7a 83       	std	Y+2, r23	; 0x02
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	2d 83       	std	Y+5, r18	; 0x05
    1b3c:	3e 83       	std	Y+6, r19	; 0x06
    1b3e:	4f 83       	std	Y+7, r20	; 0x07
    1b40:	58 87       	std	Y+8, r21	; 0x08
    1b42:	89 e0       	ldi	r24, 0x09	; 9
    1b44:	e8 2e       	mov	r14, r24
    1b46:	f1 2c       	mov	r15, r1
    1b48:	ec 0e       	add	r14, r28
    1b4a:	fd 1e       	adc	r15, r29
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	b7 01       	movw	r22, r14
    1b52:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1b56:	8e 01       	movw	r16, r28
    1b58:	0f 5e       	subi	r16, 0xEF	; 239
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	05 96       	adiw	r24, 0x05	; 5
    1b60:	b8 01       	movw	r22, r16
    1b62:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	40 f0       	brcs	.+16     	; 0x1b7c <__gtsf2+0x56>
    1b6c:	89 89       	ldd	r24, Y+17	; 0x11
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	28 f0       	brcs	.+10     	; 0x1b7c <__gtsf2+0x56>
    1b72:	c7 01       	movw	r24, r14
    1b74:	b8 01       	movw	r22, r16
    1b76:	0e 94 ba 10 	call	0x2174	; 0x2174 <__fpcmp_parts_f>
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <__gtsf2+0x58>
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	68 96       	adiw	r28, 0x18	; 24
    1b80:	e6 e0       	ldi	r30, 0x06	; 6
    1b82:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__epilogue_restores__+0x18>

00001b86 <__gesf2>:
    1b86:	a8 e1       	ldi	r26, 0x18	; 24
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    1b8c:	fd e0       	ldi	r31, 0x0D	; 13
    1b8e:	0c 94 46 11 	jmp	0x228c	; 0x228c <__prologue_saves__+0x18>
    1b92:	69 83       	std	Y+1, r22	; 0x01
    1b94:	7a 83       	std	Y+2, r23	; 0x02
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	2d 83       	std	Y+5, r18	; 0x05
    1b9c:	3e 83       	std	Y+6, r19	; 0x06
    1b9e:	4f 83       	std	Y+7, r20	; 0x07
    1ba0:	58 87       	std	Y+8, r21	; 0x08
    1ba2:	89 e0       	ldi	r24, 0x09	; 9
    1ba4:	e8 2e       	mov	r14, r24
    1ba6:	f1 2c       	mov	r15, r1
    1ba8:	ec 0e       	add	r14, r28
    1baa:	fd 1e       	adc	r15, r29
    1bac:	ce 01       	movw	r24, r28
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	b7 01       	movw	r22, r14
    1bb2:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	0f 5e       	subi	r16, 0xEF	; 239
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	05 96       	adiw	r24, 0x05	; 5
    1bc0:	b8 01       	movw	r22, r16
    1bc2:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	40 f0       	brcs	.+16     	; 0x1bdc <__gesf2+0x56>
    1bcc:	89 89       	ldd	r24, Y+17	; 0x11
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	28 f0       	brcs	.+10     	; 0x1bdc <__gesf2+0x56>
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	b8 01       	movw	r22, r16
    1bd6:	0e 94 ba 10 	call	0x2174	; 0x2174 <__fpcmp_parts_f>
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <__gesf2+0x58>
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	68 96       	adiw	r28, 0x18	; 24
    1be0:	e6 e0       	ldi	r30, 0x06	; 6
    1be2:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__epilogue_restores__+0x18>

00001be6 <__floatsisf>:
    1be6:	a8 e0       	ldi	r26, 0x08	; 8
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e9 ef       	ldi	r30, 0xF9	; 249
    1bec:	fd e0       	ldi	r31, 0x0D	; 13
    1bee:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__prologue_saves__+0x12>
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	da 01       	movw	r26, r20
    1bfc:	c9 01       	movw	r24, r18
    1bfe:	88 27       	eor	r24, r24
    1c00:	b7 fd       	sbrc	r27, 7
    1c02:	83 95       	inc	r24
    1c04:	99 27       	eor	r25, r25
    1c06:	aa 27       	eor	r26, r26
    1c08:	bb 27       	eor	r27, r27
    1c0a:	b8 2e       	mov	r11, r24
    1c0c:	21 15       	cp	r18, r1
    1c0e:	31 05       	cpc	r19, r1
    1c10:	41 05       	cpc	r20, r1
    1c12:	51 05       	cpc	r21, r1
    1c14:	19 f4       	brne	.+6      	; 0x1c1c <__floatsisf+0x36>
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	3a c0       	rjmp	.+116    	; 0x1c90 <__floatsisf+0xaa>
    1c1c:	88 23       	and	r24, r24
    1c1e:	a9 f0       	breq	.+42     	; 0x1c4a <__floatsisf+0x64>
    1c20:	20 30       	cpi	r18, 0x00	; 0
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	38 07       	cpc	r19, r24
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	48 07       	cpc	r20, r24
    1c2a:	80 e8       	ldi	r24, 0x80	; 128
    1c2c:	58 07       	cpc	r21, r24
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <__floatsisf+0x54>
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	9f ec       	ldi	r25, 0xCF	; 207
    1c38:	30 c0       	rjmp	.+96     	; 0x1c9a <__floatsisf+0xb4>
    1c3a:	ee 24       	eor	r14, r14
    1c3c:	ff 24       	eor	r15, r15
    1c3e:	87 01       	movw	r16, r14
    1c40:	e2 1a       	sub	r14, r18
    1c42:	f3 0a       	sbc	r15, r19
    1c44:	04 0b       	sbc	r16, r20
    1c46:	15 0b       	sbc	r17, r21
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <__floatsisf+0x68>
    1c4a:	79 01       	movw	r14, r18
    1c4c:	8a 01       	movw	r16, r20
    1c4e:	8e e1       	ldi	r24, 0x1E	; 30
    1c50:	c8 2e       	mov	r12, r24
    1c52:	d1 2c       	mov	r13, r1
    1c54:	dc 82       	std	Y+4, r13	; 0x04
    1c56:	cb 82       	std	Y+3, r12	; 0x03
    1c58:	ed 82       	std	Y+5, r14	; 0x05
    1c5a:	fe 82       	std	Y+6, r15	; 0x06
    1c5c:	0f 83       	std	Y+7, r16	; 0x07
    1c5e:	18 87       	std	Y+8, r17	; 0x08
    1c60:	c8 01       	movw	r24, r16
    1c62:	b7 01       	movw	r22, r14
    1c64:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__clzsi2>
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	18 16       	cp	r1, r24
    1c6c:	19 06       	cpc	r1, r25
    1c6e:	84 f4       	brge	.+32     	; 0x1c90 <__floatsisf+0xaa>
    1c70:	08 2e       	mov	r0, r24
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <__floatsisf+0x96>
    1c74:	ee 0c       	add	r14, r14
    1c76:	ff 1c       	adc	r15, r15
    1c78:	00 1f       	adc	r16, r16
    1c7a:	11 1f       	adc	r17, r17
    1c7c:	0a 94       	dec	r0
    1c7e:	d2 f7       	brpl	.-12     	; 0x1c74 <__floatsisf+0x8e>
    1c80:	ed 82       	std	Y+5, r14	; 0x05
    1c82:	fe 82       	std	Y+6, r15	; 0x06
    1c84:	0f 83       	std	Y+7, r16	; 0x07
    1c86:	18 87       	std	Y+8, r17	; 0x08
    1c88:	c8 1a       	sub	r12, r24
    1c8a:	d9 0a       	sbc	r13, r25
    1c8c:	dc 82       	std	Y+4, r13	; 0x04
    1c8e:	cb 82       	std	Y+3, r12	; 0x03
    1c90:	ba 82       	std	Y+2, r11	; 0x02
    1c92:	ce 01       	movw	r24, r28
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__pack_f>
    1c9a:	28 96       	adiw	r28, 0x08	; 8
    1c9c:	e9 e0       	ldi	r30, 0x09	; 9
    1c9e:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__epilogue_restores__+0x12>

00001ca2 <__fixsfsi>:
    1ca2:	ac e0       	ldi	r26, 0x0C	; 12
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e7 e5       	ldi	r30, 0x57	; 87
    1ca8:	fe e0       	ldi	r31, 0x0E	; 14
    1caa:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x20>
    1cae:	69 83       	std	Y+1, r22	; 0x01
    1cb0:	7a 83       	std	Y+2, r23	; 0x02
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	be 01       	movw	r22, r28
    1cbc:	6b 5f       	subi	r22, 0xFB	; 251
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	0e 94 42 10 	call	0x2084	; 0x2084 <__unpack_f>
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	61 f1       	breq	.+88     	; 0x1d22 <__fixsfsi+0x80>
    1cca:	82 30       	cpi	r24, 0x02	; 2
    1ccc:	50 f1       	brcs	.+84     	; 0x1d22 <__fixsfsi+0x80>
    1cce:	84 30       	cpi	r24, 0x04	; 4
    1cd0:	21 f4       	brne	.+8      	; 0x1cda <__fixsfsi+0x38>
    1cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd4:	88 23       	and	r24, r24
    1cd6:	51 f1       	breq	.+84     	; 0x1d2c <__fixsfsi+0x8a>
    1cd8:	2e c0       	rjmp	.+92     	; 0x1d36 <__fixsfsi+0x94>
    1cda:	2f 81       	ldd	r18, Y+7	; 0x07
    1cdc:	38 85       	ldd	r19, Y+8	; 0x08
    1cde:	37 fd       	sbrc	r19, 7
    1ce0:	20 c0       	rjmp	.+64     	; 0x1d22 <__fixsfsi+0x80>
    1ce2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ce4:	2f 31       	cpi	r18, 0x1F	; 31
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	1c f0       	brlt	.+6      	; 0x1cf0 <__fixsfsi+0x4e>
    1cea:	66 23       	and	r22, r22
    1cec:	f9 f0       	breq	.+62     	; 0x1d2c <__fixsfsi+0x8a>
    1cee:	23 c0       	rjmp	.+70     	; 0x1d36 <__fixsfsi+0x94>
    1cf0:	8e e1       	ldi	r24, 0x1E	; 30
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	82 1b       	sub	r24, r18
    1cf6:	93 0b       	sbc	r25, r19
    1cf8:	29 85       	ldd	r18, Y+9	; 0x09
    1cfa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cfc:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cfe:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <__fixsfsi+0x68>
    1d02:	56 95       	lsr	r21
    1d04:	47 95       	ror	r20
    1d06:	37 95       	ror	r19
    1d08:	27 95       	ror	r18
    1d0a:	8a 95       	dec	r24
    1d0c:	d2 f7       	brpl	.-12     	; 0x1d02 <__fixsfsi+0x60>
    1d0e:	66 23       	and	r22, r22
    1d10:	b1 f0       	breq	.+44     	; 0x1d3e <__fixsfsi+0x9c>
    1d12:	50 95       	com	r21
    1d14:	40 95       	com	r20
    1d16:	30 95       	com	r19
    1d18:	21 95       	neg	r18
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d20:	0e c0       	rjmp	.+28     	; 0x1d3e <__fixsfsi+0x9c>
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	09 c0       	rjmp	.+18     	; 0x1d3e <__fixsfsi+0x9c>
    1d2c:	2f ef       	ldi	r18, 0xFF	; 255
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f ef       	ldi	r20, 0xFF	; 255
    1d32:	5f e7       	ldi	r21, 0x7F	; 127
    1d34:	04 c0       	rjmp	.+8      	; 0x1d3e <__fixsfsi+0x9c>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e8       	ldi	r21, 0x80	; 128
    1d3e:	b9 01       	movw	r22, r18
    1d40:	ca 01       	movw	r24, r20
    1d42:	2c 96       	adiw	r28, 0x0c	; 12
    1d44:	e2 e0       	ldi	r30, 0x02	; 2
    1d46:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x20>

00001d4a <__floatunsisf>:
    1d4a:	a8 e0       	ldi	r26, 0x08	; 8
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb ea       	ldi	r30, 0xAB	; 171
    1d50:	fe e0       	ldi	r31, 0x0E	; 14
    1d52:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__prologue_saves__+0x10>
    1d56:	7b 01       	movw	r14, r22
    1d58:	8c 01       	movw	r16, r24
    1d5a:	61 15       	cp	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	81 05       	cpc	r24, r1
    1d60:	91 05       	cpc	r25, r1
    1d62:	19 f4       	brne	.+6      	; 0x1d6a <__floatunsisf+0x20>
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	60 c0       	rjmp	.+192    	; 0x1e2a <__floatunsisf+0xe0>
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	8e e1       	ldi	r24, 0x1E	; 30
    1d70:	c8 2e       	mov	r12, r24
    1d72:	d1 2c       	mov	r13, r1
    1d74:	dc 82       	std	Y+4, r13	; 0x04
    1d76:	cb 82       	std	Y+3, r12	; 0x03
    1d78:	ed 82       	std	Y+5, r14	; 0x05
    1d7a:	fe 82       	std	Y+6, r15	; 0x06
    1d7c:	0f 83       	std	Y+7, r16	; 0x07
    1d7e:	18 87       	std	Y+8, r17	; 0x08
    1d80:	c8 01       	movw	r24, r16
    1d82:	b7 01       	movw	r22, r14
    1d84:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__clzsi2>
    1d88:	fc 01       	movw	r30, r24
    1d8a:	31 97       	sbiw	r30, 0x01	; 1
    1d8c:	f7 ff       	sbrs	r31, 7
    1d8e:	3b c0       	rjmp	.+118    	; 0x1e06 <__floatunsisf+0xbc>
    1d90:	22 27       	eor	r18, r18
    1d92:	33 27       	eor	r19, r19
    1d94:	2e 1b       	sub	r18, r30
    1d96:	3f 0b       	sbc	r19, r31
    1d98:	57 01       	movw	r10, r14
    1d9a:	68 01       	movw	r12, r16
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <__floatunsisf+0x5e>
    1da0:	d6 94       	lsr	r13
    1da2:	c7 94       	ror	r12
    1da4:	b7 94       	ror	r11
    1da6:	a7 94       	ror	r10
    1da8:	0a 94       	dec	r0
    1daa:	d2 f7       	brpl	.-12     	; 0x1da0 <__floatunsisf+0x56>
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e0       	ldi	r26, 0x00	; 0
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <__floatunsisf+0x7c>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	aa 1f       	adc	r26, r26
    1dc4:	bb 1f       	adc	r27, r27
    1dc6:	2a 95       	dec	r18
    1dc8:	d2 f7       	brpl	.-12     	; 0x1dbe <__floatunsisf+0x74>
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	a1 09       	sbc	r26, r1
    1dce:	b1 09       	sbc	r27, r1
    1dd0:	8e 21       	and	r24, r14
    1dd2:	9f 21       	and	r25, r15
    1dd4:	a0 23       	and	r26, r16
    1dd6:	b1 23       	and	r27, r17
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	a1 05       	cpc	r26, r1
    1ddc:	b1 05       	cpc	r27, r1
    1dde:	21 f0       	breq	.+8      	; 0x1de8 <__floatunsisf+0x9e>
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	4a 29       	or	r20, r10
    1dea:	5b 29       	or	r21, r11
    1dec:	6c 29       	or	r22, r12
    1dee:	7d 29       	or	r23, r13
    1df0:	4d 83       	std	Y+5, r20	; 0x05
    1df2:	5e 83       	std	Y+6, r21	; 0x06
    1df4:	6f 83       	std	Y+7, r22	; 0x07
    1df6:	78 87       	std	Y+8, r23	; 0x08
    1df8:	8e e1       	ldi	r24, 0x1E	; 30
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	8e 1b       	sub	r24, r30
    1dfe:	9f 0b       	sbc	r25, r31
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	12 c0       	rjmp	.+36     	; 0x1e2a <__floatunsisf+0xe0>
    1e06:	30 97       	sbiw	r30, 0x00	; 0
    1e08:	81 f0       	breq	.+32     	; 0x1e2a <__floatunsisf+0xe0>
    1e0a:	0e 2e       	mov	r0, r30
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <__floatunsisf+0xcc>
    1e0e:	ee 0c       	add	r14, r14
    1e10:	ff 1c       	adc	r15, r15
    1e12:	00 1f       	adc	r16, r16
    1e14:	11 1f       	adc	r17, r17
    1e16:	0a 94       	dec	r0
    1e18:	d2 f7       	brpl	.-12     	; 0x1e0e <__floatunsisf+0xc4>
    1e1a:	ed 82       	std	Y+5, r14	; 0x05
    1e1c:	fe 82       	std	Y+6, r15	; 0x06
    1e1e:	0f 83       	std	Y+7, r16	; 0x07
    1e20:	18 87       	std	Y+8, r17	; 0x08
    1e22:	ce 1a       	sub	r12, r30
    1e24:	df 0a       	sbc	r13, r31
    1e26:	dc 82       	std	Y+4, r13	; 0x04
    1e28:	cb 82       	std	Y+3, r12	; 0x03
    1e2a:	1a 82       	std	Y+2, r1	; 0x02
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__pack_f>
    1e34:	28 96       	adiw	r28, 0x08	; 8
    1e36:	ea e0       	ldi	r30, 0x0A	; 10
    1e38:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__epilogue_restores__+0x10>

00001e3c <__clzsi2>:
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	7b 01       	movw	r14, r22
    1e46:	8c 01       	movw	r16, r24
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	e8 16       	cp	r14, r24
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	f8 06       	cpc	r15, r24
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	08 07       	cpc	r16, r24
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	18 07       	cpc	r17, r24
    1e58:	88 f4       	brcc	.+34     	; 0x1e7c <__clzsi2+0x40>
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	e8 16       	cp	r14, r24
    1e5e:	f1 04       	cpc	r15, r1
    1e60:	01 05       	cpc	r16, r1
    1e62:	11 05       	cpc	r17, r1
    1e64:	31 f0       	breq	.+12     	; 0x1e72 <__clzsi2+0x36>
    1e66:	28 f0       	brcs	.+10     	; 0x1e72 <__clzsi2+0x36>
    1e68:	88 e0       	ldi	r24, 0x08	; 8
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	17 c0       	rjmp	.+46     	; 0x1ea0 <__clzsi2+0x64>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e0       	ldi	r26, 0x00	; 0
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	12 c0       	rjmp	.+36     	; 0x1ea0 <__clzsi2+0x64>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	e8 16       	cp	r14, r24
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	f8 06       	cpc	r15, r24
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	08 07       	cpc	r16, r24
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	18 07       	cpc	r17, r24
    1e8c:	28 f0       	brcs	.+10     	; 0x1e98 <__clzsi2+0x5c>
    1e8e:	88 e1       	ldi	r24, 0x18	; 24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e0       	ldi	r26, 0x00	; 0
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <__clzsi2+0x64>
    1e98:	80 e1       	ldi	r24, 0x10	; 16
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e0       	ldi	r26, 0x00	; 0
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	20 e2       	ldi	r18, 0x20	; 32
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	28 1b       	sub	r18, r24
    1eaa:	39 0b       	sbc	r19, r25
    1eac:	4a 0b       	sbc	r20, r26
    1eae:	5b 0b       	sbc	r21, r27
    1eb0:	04 c0       	rjmp	.+8      	; 0x1eba <__clzsi2+0x7e>
    1eb2:	16 95       	lsr	r17
    1eb4:	07 95       	ror	r16
    1eb6:	f7 94       	ror	r15
    1eb8:	e7 94       	ror	r14
    1eba:	8a 95       	dec	r24
    1ebc:	d2 f7       	brpl	.-12     	; 0x1eb2 <__clzsi2+0x76>
    1ebe:	f7 01       	movw	r30, r14
    1ec0:	e8 5e       	subi	r30, 0xE8	; 232
    1ec2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec4:	80 81       	ld	r24, Z
    1ec6:	28 1b       	sub	r18, r24
    1ec8:	31 09       	sbc	r19, r1
    1eca:	41 09       	sbc	r20, r1
    1ecc:	51 09       	sbc	r21, r1
    1ece:	c9 01       	movw	r24, r18
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	ff 90       	pop	r15
    1ed6:	ef 90       	pop	r14
    1ed8:	08 95       	ret

00001eda <__pack_f>:
    1eda:	df 92       	push	r13
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e4 80       	ldd	r14, Z+4	; 0x04
    1ee8:	f5 80       	ldd	r15, Z+5	; 0x05
    1eea:	06 81       	ldd	r16, Z+6	; 0x06
    1eec:	17 81       	ldd	r17, Z+7	; 0x07
    1eee:	d1 80       	ldd	r13, Z+1	; 0x01
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	48 f4       	brcc	.+18     	; 0x1f08 <__pack_f+0x2e>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e1       	ldi	r26, 0x10	; 16
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e8 2a       	or	r14, r24
    1f00:	f9 2a       	or	r15, r25
    1f02:	0a 2b       	or	r16, r26
    1f04:	1b 2b       	or	r17, r27
    1f06:	a5 c0       	rjmp	.+330    	; 0x2052 <__pack_f+0x178>
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <__pack_f+0x34>
    1f0c:	9f c0       	rjmp	.+318    	; 0x204c <__pack_f+0x172>
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	21 f4       	brne	.+8      	; 0x1f1a <__pack_f+0x40>
    1f12:	ee 24       	eor	r14, r14
    1f14:	ff 24       	eor	r15, r15
    1f16:	87 01       	movw	r16, r14
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <__pack_f+0x4a>
    1f1a:	e1 14       	cp	r14, r1
    1f1c:	f1 04       	cpc	r15, r1
    1f1e:	01 05       	cpc	r16, r1
    1f20:	11 05       	cpc	r17, r1
    1f22:	19 f4       	brne	.+6      	; 0x1f2a <__pack_f+0x50>
    1f24:	e0 e0       	ldi	r30, 0x00	; 0
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	96 c0       	rjmp	.+300    	; 0x2056 <__pack_f+0x17c>
    1f2a:	62 81       	ldd	r22, Z+2	; 0x02
    1f2c:	73 81       	ldd	r23, Z+3	; 0x03
    1f2e:	9f ef       	ldi	r25, 0xFF	; 255
    1f30:	62 38       	cpi	r22, 0x82	; 130
    1f32:	79 07       	cpc	r23, r25
    1f34:	0c f0       	brlt	.+2      	; 0x1f38 <__pack_f+0x5e>
    1f36:	5b c0       	rjmp	.+182    	; 0x1fee <__pack_f+0x114>
    1f38:	22 e8       	ldi	r18, 0x82	; 130
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	26 1b       	sub	r18, r22
    1f3e:	37 0b       	sbc	r19, r23
    1f40:	2a 31       	cpi	r18, 0x1A	; 26
    1f42:	31 05       	cpc	r19, r1
    1f44:	2c f0       	brlt	.+10     	; 0x1f50 <__pack_f+0x76>
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	2a c0       	rjmp	.+84     	; 0x1fa4 <__pack_f+0xca>
    1f50:	b8 01       	movw	r22, r16
    1f52:	a7 01       	movw	r20, r14
    1f54:	02 2e       	mov	r0, r18
    1f56:	04 c0       	rjmp	.+8      	; 0x1f60 <__pack_f+0x86>
    1f58:	76 95       	lsr	r23
    1f5a:	67 95       	ror	r22
    1f5c:	57 95       	ror	r21
    1f5e:	47 95       	ror	r20
    1f60:	0a 94       	dec	r0
    1f62:	d2 f7       	brpl	.-12     	; 0x1f58 <__pack_f+0x7e>
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e0       	ldi	r26, 0x00	; 0
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <__pack_f+0x9c>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	aa 1f       	adc	r26, r26
    1f74:	bb 1f       	adc	r27, r27
    1f76:	2a 95       	dec	r18
    1f78:	d2 f7       	brpl	.-12     	; 0x1f6e <__pack_f+0x94>
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	a1 09       	sbc	r26, r1
    1f7e:	b1 09       	sbc	r27, r1
    1f80:	8e 21       	and	r24, r14
    1f82:	9f 21       	and	r25, r15
    1f84:	a0 23       	and	r26, r16
    1f86:	b1 23       	and	r27, r17
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	a1 05       	cpc	r26, r1
    1f8c:	b1 05       	cpc	r27, r1
    1f8e:	21 f0       	breq	.+8      	; 0x1f98 <__pack_f+0xbe>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a0 e0       	ldi	r26, 0x00	; 0
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	9a 01       	movw	r18, r20
    1f9a:	ab 01       	movw	r20, r22
    1f9c:	28 2b       	or	r18, r24
    1f9e:	39 2b       	or	r19, r25
    1fa0:	4a 2b       	or	r20, r26
    1fa2:	5b 2b       	or	r21, r27
    1fa4:	da 01       	movw	r26, r20
    1fa6:	c9 01       	movw	r24, r18
    1fa8:	8f 77       	andi	r24, 0x7F	; 127
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	a0 70       	andi	r26, 0x00	; 0
    1fae:	b0 70       	andi	r27, 0x00	; 0
    1fb0:	80 34       	cpi	r24, 0x40	; 64
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	a1 05       	cpc	r26, r1
    1fb6:	b1 05       	cpc	r27, r1
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <__pack_f+0xee>
    1fba:	27 ff       	sbrs	r18, 7
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <__pack_f+0xf6>
    1fbe:	20 5c       	subi	r18, 0xC0	; 192
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	4f 4f       	sbci	r20, 0xFF	; 255
    1fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <__pack_f+0xf6>
    1fc8:	21 5c       	subi	r18, 0xC1	; 193
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	4f 4f       	sbci	r20, 0xFF	; 255
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	e0 e0       	ldi	r30, 0x00	; 0
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	20 30       	cpi	r18, 0x00	; 0
    1fd6:	a0 e0       	ldi	r26, 0x00	; 0
    1fd8:	3a 07       	cpc	r19, r26
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	4a 07       	cpc	r20, r26
    1fde:	a0 e4       	ldi	r26, 0x40	; 64
    1fe0:	5a 07       	cpc	r21, r26
    1fe2:	10 f0       	brcs	.+4      	; 0x1fe8 <__pack_f+0x10e>
    1fe4:	e1 e0       	ldi	r30, 0x01	; 1
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	79 01       	movw	r14, r18
    1fea:	8a 01       	movw	r16, r20
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <__pack_f+0x162>
    1fee:	60 38       	cpi	r22, 0x80	; 128
    1ff0:	71 05       	cpc	r23, r1
    1ff2:	64 f5       	brge	.+88     	; 0x204c <__pack_f+0x172>
    1ff4:	fb 01       	movw	r30, r22
    1ff6:	e1 58       	subi	r30, 0x81	; 129
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	d8 01       	movw	r26, r16
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	8f 77       	andi	r24, 0x7F	; 127
    2000:	90 70       	andi	r25, 0x00	; 0
    2002:	a0 70       	andi	r26, 0x00	; 0
    2004:	b0 70       	andi	r27, 0x00	; 0
    2006:	80 34       	cpi	r24, 0x40	; 64
    2008:	91 05       	cpc	r25, r1
    200a:	a1 05       	cpc	r26, r1
    200c:	b1 05       	cpc	r27, r1
    200e:	39 f4       	brne	.+14     	; 0x201e <__pack_f+0x144>
    2010:	e7 fe       	sbrs	r14, 7
    2012:	0d c0       	rjmp	.+26     	; 0x202e <__pack_f+0x154>
    2014:	80 e4       	ldi	r24, 0x40	; 64
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e0       	ldi	r26, 0x00	; 0
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	04 c0       	rjmp	.+8      	; 0x2026 <__pack_f+0x14c>
    201e:	8f e3       	ldi	r24, 0x3F	; 63
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e8 0e       	add	r14, r24
    2028:	f9 1e       	adc	r15, r25
    202a:	0a 1f       	adc	r16, r26
    202c:	1b 1f       	adc	r17, r27
    202e:	17 ff       	sbrs	r17, 7
    2030:	05 c0       	rjmp	.+10     	; 0x203c <__pack_f+0x162>
    2032:	16 95       	lsr	r17
    2034:	07 95       	ror	r16
    2036:	f7 94       	ror	r15
    2038:	e7 94       	ror	r14
    203a:	31 96       	adiw	r30, 0x01	; 1
    203c:	87 e0       	ldi	r24, 0x07	; 7
    203e:	16 95       	lsr	r17
    2040:	07 95       	ror	r16
    2042:	f7 94       	ror	r15
    2044:	e7 94       	ror	r14
    2046:	8a 95       	dec	r24
    2048:	d1 f7       	brne	.-12     	; 0x203e <__pack_f+0x164>
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <__pack_f+0x17c>
    204c:	ee 24       	eor	r14, r14
    204e:	ff 24       	eor	r15, r15
    2050:	87 01       	movw	r16, r14
    2052:	ef ef       	ldi	r30, 0xFF	; 255
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	6e 2f       	mov	r22, r30
    2058:	67 95       	ror	r22
    205a:	66 27       	eor	r22, r22
    205c:	67 95       	ror	r22
    205e:	90 2f       	mov	r25, r16
    2060:	9f 77       	andi	r25, 0x7F	; 127
    2062:	d7 94       	ror	r13
    2064:	dd 24       	eor	r13, r13
    2066:	d7 94       	ror	r13
    2068:	8e 2f       	mov	r24, r30
    206a:	86 95       	lsr	r24
    206c:	49 2f       	mov	r20, r25
    206e:	46 2b       	or	r20, r22
    2070:	58 2f       	mov	r21, r24
    2072:	5d 29       	or	r21, r13
    2074:	b7 01       	movw	r22, r14
    2076:	ca 01       	movw	r24, r20
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	df 90       	pop	r13
    2082:	08 95       	ret

00002084 <__unpack_f>:
    2084:	fc 01       	movw	r30, r24
    2086:	db 01       	movw	r26, r22
    2088:	40 81       	ld	r20, Z
    208a:	51 81       	ldd	r21, Z+1	; 0x01
    208c:	22 81       	ldd	r18, Z+2	; 0x02
    208e:	62 2f       	mov	r22, r18
    2090:	6f 77       	andi	r22, 0x7F	; 127
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	22 1f       	adc	r18, r18
    2096:	22 27       	eor	r18, r18
    2098:	22 1f       	adc	r18, r18
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	89 2f       	mov	r24, r25
    209e:	88 0f       	add	r24, r24
    20a0:	82 2b       	or	r24, r18
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	99 1f       	adc	r25, r25
    20a8:	99 27       	eor	r25, r25
    20aa:	99 1f       	adc	r25, r25
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	9c 93       	st	X, r25
    20b0:	11 97       	sbiw	r26, 0x01	; 1
    20b2:	21 15       	cp	r18, r1
    20b4:	31 05       	cpc	r19, r1
    20b6:	a9 f5       	brne	.+106    	; 0x2122 <__unpack_f+0x9e>
    20b8:	41 15       	cp	r20, r1
    20ba:	51 05       	cpc	r21, r1
    20bc:	61 05       	cpc	r22, r1
    20be:	71 05       	cpc	r23, r1
    20c0:	11 f4       	brne	.+4      	; 0x20c6 <__unpack_f+0x42>
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	37 c0       	rjmp	.+110    	; 0x2134 <__unpack_f+0xb0>
    20c6:	82 e8       	ldi	r24, 0x82	; 130
    20c8:	9f ef       	ldi	r25, 0xFF	; 255
    20ca:	13 96       	adiw	r26, 0x03	; 3
    20cc:	9c 93       	st	X, r25
    20ce:	8e 93       	st	-X, r24
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	9a 01       	movw	r18, r20
    20d4:	ab 01       	movw	r20, r22
    20d6:	67 e0       	ldi	r22, 0x07	; 7
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	44 1f       	adc	r20, r20
    20de:	55 1f       	adc	r21, r21
    20e0:	6a 95       	dec	r22
    20e2:	d1 f7       	brne	.-12     	; 0x20d8 <__unpack_f+0x54>
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	8c 93       	st	X, r24
    20e8:	0d c0       	rjmp	.+26     	; 0x2104 <__unpack_f+0x80>
    20ea:	22 0f       	add	r18, r18
    20ec:	33 1f       	adc	r19, r19
    20ee:	44 1f       	adc	r20, r20
    20f0:	55 1f       	adc	r21, r21
    20f2:	12 96       	adiw	r26, 0x02	; 2
    20f4:	8d 91       	ld	r24, X+
    20f6:	9c 91       	ld	r25, X
    20f8:	13 97       	sbiw	r26, 0x03	; 3
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	13 96       	adiw	r26, 0x03	; 3
    20fe:	9c 93       	st	X, r25
    2100:	8e 93       	st	-X, r24
    2102:	12 97       	sbiw	r26, 0x02	; 2
    2104:	20 30       	cpi	r18, 0x00	; 0
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	38 07       	cpc	r19, r24
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	48 07       	cpc	r20, r24
    210e:	80 e4       	ldi	r24, 0x40	; 64
    2110:	58 07       	cpc	r21, r24
    2112:	58 f3       	brcs	.-42     	; 0x20ea <__unpack_f+0x66>
    2114:	14 96       	adiw	r26, 0x04	; 4
    2116:	2d 93       	st	X+, r18
    2118:	3d 93       	st	X+, r19
    211a:	4d 93       	st	X+, r20
    211c:	5c 93       	st	X, r21
    211e:	17 97       	sbiw	r26, 0x07	; 7
    2120:	08 95       	ret
    2122:	2f 3f       	cpi	r18, 0xFF	; 255
    2124:	31 05       	cpc	r19, r1
    2126:	79 f4       	brne	.+30     	; 0x2146 <__unpack_f+0xc2>
    2128:	41 15       	cp	r20, r1
    212a:	51 05       	cpc	r21, r1
    212c:	61 05       	cpc	r22, r1
    212e:	71 05       	cpc	r23, r1
    2130:	19 f4       	brne	.+6      	; 0x2138 <__unpack_f+0xb4>
    2132:	84 e0       	ldi	r24, 0x04	; 4
    2134:	8c 93       	st	X, r24
    2136:	08 95       	ret
    2138:	64 ff       	sbrs	r22, 4
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <__unpack_f+0xbe>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	8c 93       	st	X, r24
    2140:	12 c0       	rjmp	.+36     	; 0x2166 <__unpack_f+0xe2>
    2142:	1c 92       	st	X, r1
    2144:	10 c0       	rjmp	.+32     	; 0x2166 <__unpack_f+0xe2>
    2146:	2f 57       	subi	r18, 0x7F	; 127
    2148:	30 40       	sbci	r19, 0x00	; 0
    214a:	13 96       	adiw	r26, 0x03	; 3
    214c:	3c 93       	st	X, r19
    214e:	2e 93       	st	-X, r18
    2150:	12 97       	sbiw	r26, 0x02	; 2
    2152:	83 e0       	ldi	r24, 0x03	; 3
    2154:	8c 93       	st	X, r24
    2156:	87 e0       	ldi	r24, 0x07	; 7
    2158:	44 0f       	add	r20, r20
    215a:	55 1f       	adc	r21, r21
    215c:	66 1f       	adc	r22, r22
    215e:	77 1f       	adc	r23, r23
    2160:	8a 95       	dec	r24
    2162:	d1 f7       	brne	.-12     	; 0x2158 <__unpack_f+0xd4>
    2164:	70 64       	ori	r23, 0x40	; 64
    2166:	14 96       	adiw	r26, 0x04	; 4
    2168:	4d 93       	st	X+, r20
    216a:	5d 93       	st	X+, r21
    216c:	6d 93       	st	X+, r22
    216e:	7c 93       	st	X, r23
    2170:	17 97       	sbiw	r26, 0x07	; 7
    2172:	08 95       	ret

00002174 <__fpcmp_parts_f>:
    2174:	1f 93       	push	r17
    2176:	dc 01       	movw	r26, r24
    2178:	fb 01       	movw	r30, r22
    217a:	9c 91       	ld	r25, X
    217c:	92 30       	cpi	r25, 0x02	; 2
    217e:	08 f4       	brcc	.+2      	; 0x2182 <__fpcmp_parts_f+0xe>
    2180:	47 c0       	rjmp	.+142    	; 0x2210 <__stack+0x11>
    2182:	80 81       	ld	r24, Z
    2184:	82 30       	cpi	r24, 0x02	; 2
    2186:	08 f4       	brcc	.+2      	; 0x218a <__fpcmp_parts_f+0x16>
    2188:	43 c0       	rjmp	.+134    	; 0x2210 <__stack+0x11>
    218a:	94 30       	cpi	r25, 0x04	; 4
    218c:	51 f4       	brne	.+20     	; 0x21a2 <__fpcmp_parts_f+0x2e>
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	1c 91       	ld	r17, X
    2192:	84 30       	cpi	r24, 0x04	; 4
    2194:	99 f5       	brne	.+102    	; 0x21fc <__fpcmp_parts_f+0x88>
    2196:	81 81       	ldd	r24, Z+1	; 0x01
    2198:	68 2f       	mov	r22, r24
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	61 1b       	sub	r22, r17
    219e:	71 09       	sbc	r23, r1
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <__stack+0x21>
    21a2:	84 30       	cpi	r24, 0x04	; 4
    21a4:	21 f0       	breq	.+8      	; 0x21ae <__fpcmp_parts_f+0x3a>
    21a6:	92 30       	cpi	r25, 0x02	; 2
    21a8:	31 f4       	brne	.+12     	; 0x21b6 <__fpcmp_parts_f+0x42>
    21aa:	82 30       	cpi	r24, 0x02	; 2
    21ac:	b9 f1       	breq	.+110    	; 0x221c <__stack+0x1d>
    21ae:	81 81       	ldd	r24, Z+1	; 0x01
    21b0:	88 23       	and	r24, r24
    21b2:	89 f1       	breq	.+98     	; 0x2216 <__stack+0x17>
    21b4:	2d c0       	rjmp	.+90     	; 0x2210 <__stack+0x11>
    21b6:	11 96       	adiw	r26, 0x01	; 1
    21b8:	1c 91       	ld	r17, X
    21ba:	11 97       	sbiw	r26, 0x01	; 1
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	f1 f0       	breq	.+60     	; 0x21fc <__fpcmp_parts_f+0x88>
    21c0:	81 81       	ldd	r24, Z+1	; 0x01
    21c2:	18 17       	cp	r17, r24
    21c4:	d9 f4       	brne	.+54     	; 0x21fc <__fpcmp_parts_f+0x88>
    21c6:	12 96       	adiw	r26, 0x02	; 2
    21c8:	2d 91       	ld	r18, X+
    21ca:	3c 91       	ld	r19, X
    21cc:	13 97       	sbiw	r26, 0x03	; 3
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	82 17       	cp	r24, r18
    21d4:	93 07       	cpc	r25, r19
    21d6:	94 f0       	brlt	.+36     	; 0x21fc <__fpcmp_parts_f+0x88>
    21d8:	28 17       	cp	r18, r24
    21da:	39 07       	cpc	r19, r25
    21dc:	bc f0       	brlt	.+46     	; 0x220c <__stack+0xd>
    21de:	14 96       	adiw	r26, 0x04	; 4
    21e0:	8d 91       	ld	r24, X+
    21e2:	9d 91       	ld	r25, X+
    21e4:	0d 90       	ld	r0, X+
    21e6:	bc 91       	ld	r27, X
    21e8:	a0 2d       	mov	r26, r0
    21ea:	24 81       	ldd	r18, Z+4	; 0x04
    21ec:	35 81       	ldd	r19, Z+5	; 0x05
    21ee:	46 81       	ldd	r20, Z+6	; 0x06
    21f0:	57 81       	ldd	r21, Z+7	; 0x07
    21f2:	28 17       	cp	r18, r24
    21f4:	39 07       	cpc	r19, r25
    21f6:	4a 07       	cpc	r20, r26
    21f8:	5b 07       	cpc	r21, r27
    21fa:	18 f4       	brcc	.+6      	; 0x2202 <__stack+0x3>
    21fc:	11 23       	and	r17, r17
    21fe:	41 f0       	breq	.+16     	; 0x2210 <__stack+0x11>
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <__stack+0x17>
    2202:	82 17       	cp	r24, r18
    2204:	93 07       	cpc	r25, r19
    2206:	a4 07       	cpc	r26, r20
    2208:	b5 07       	cpc	r27, r21
    220a:	40 f4       	brcc	.+16     	; 0x221c <__stack+0x1d>
    220c:	11 23       	and	r17, r17
    220e:	19 f0       	breq	.+6      	; 0x2216 <__stack+0x17>
    2210:	61 e0       	ldi	r22, 0x01	; 1
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	05 c0       	rjmp	.+10     	; 0x2220 <__stack+0x21>
    2216:	6f ef       	ldi	r22, 0xFF	; 255
    2218:	7f ef       	ldi	r23, 0xFF	; 255
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x21>
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	cb 01       	movw	r24, r22
    2222:	1f 91       	pop	r17
    2224:	08 95       	ret

00002226 <__udivmodhi4>:
    2226:	aa 1b       	sub	r26, r26
    2228:	bb 1b       	sub	r27, r27
    222a:	51 e1       	ldi	r21, 0x11	; 17
    222c:	07 c0       	rjmp	.+14     	; 0x223c <__udivmodhi4_ep>

0000222e <__udivmodhi4_loop>:
    222e:	aa 1f       	adc	r26, r26
    2230:	bb 1f       	adc	r27, r27
    2232:	a6 17       	cp	r26, r22
    2234:	b7 07       	cpc	r27, r23
    2236:	10 f0       	brcs	.+4      	; 0x223c <__udivmodhi4_ep>
    2238:	a6 1b       	sub	r26, r22
    223a:	b7 0b       	sbc	r27, r23

0000223c <__udivmodhi4_ep>:
    223c:	88 1f       	adc	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	5a 95       	dec	r21
    2242:	a9 f7       	brne	.-22     	; 0x222e <__udivmodhi4_loop>
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	08 95       	ret

0000224e <__divmodhi4>:
    224e:	97 fb       	bst	r25, 7
    2250:	09 2e       	mov	r0, r25
    2252:	07 26       	eor	r0, r23
    2254:	0a d0       	rcall	.+20     	; 0x226a <__divmodhi4_neg1>
    2256:	77 fd       	sbrc	r23, 7
    2258:	04 d0       	rcall	.+8      	; 0x2262 <__divmodhi4_neg2>
    225a:	e5 df       	rcall	.-54     	; 0x2226 <__udivmodhi4>
    225c:	06 d0       	rcall	.+12     	; 0x226a <__divmodhi4_neg1>
    225e:	00 20       	and	r0, r0
    2260:	1a f4       	brpl	.+6      	; 0x2268 <__divmodhi4_exit>

00002262 <__divmodhi4_neg2>:
    2262:	70 95       	com	r23
    2264:	61 95       	neg	r22
    2266:	7f 4f       	sbci	r23, 0xFF	; 255

00002268 <__divmodhi4_exit>:
    2268:	08 95       	ret

0000226a <__divmodhi4_neg1>:
    226a:	f6 f7       	brtc	.-4      	; 0x2268 <__divmodhi4_exit>
    226c:	90 95       	com	r25
    226e:	81 95       	neg	r24
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	08 95       	ret

00002274 <__prologue_saves__>:
    2274:	2f 92       	push	r2
    2276:	3f 92       	push	r3
    2278:	4f 92       	push	r4
    227a:	5f 92       	push	r5
    227c:	6f 92       	push	r6
    227e:	7f 92       	push	r7
    2280:	8f 92       	push	r8
    2282:	9f 92       	push	r9
    2284:	af 92       	push	r10
    2286:	bf 92       	push	r11
    2288:	cf 92       	push	r12
    228a:	df 92       	push	r13
    228c:	ef 92       	push	r14
    228e:	ff 92       	push	r15
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	ca 1b       	sub	r28, r26
    229e:	db 0b       	sbc	r29, r27
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	19 94       	eijmp

000022ac <__epilogue_restores__>:
    22ac:	2a 88       	ldd	r2, Y+18	; 0x12
    22ae:	39 88       	ldd	r3, Y+17	; 0x11
    22b0:	48 88       	ldd	r4, Y+16	; 0x10
    22b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    22b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    22b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    22b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    22bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    22be:	b9 84       	ldd	r11, Y+9	; 0x09
    22c0:	c8 84       	ldd	r12, Y+8	; 0x08
    22c2:	df 80       	ldd	r13, Y+7	; 0x07
    22c4:	ee 80       	ldd	r14, Y+6	; 0x06
    22c6:	fd 80       	ldd	r15, Y+5	; 0x05
    22c8:	0c 81       	ldd	r16, Y+4	; 0x04
    22ca:	1b 81       	ldd	r17, Y+3	; 0x03
    22cc:	aa 81       	ldd	r26, Y+2	; 0x02
    22ce:	b9 81       	ldd	r27, Y+1	; 0x01
    22d0:	ce 0f       	add	r28, r30
    22d2:	d1 1d       	adc	r29, r1
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	ed 01       	movw	r28, r26
    22e0:	08 95       	ret

000022e2 <pow>:
    22e2:	fa 01       	movw	r30, r20
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	30 96       	adiw	r30, 0x00	; 0
    22ea:	21 05       	cpc	r18, r1
    22ec:	31 05       	cpc	r19, r1
    22ee:	99 f1       	breq	.+102    	; 0x2356 <pow+0x74>
    22f0:	61 15       	cp	r22, r1
    22f2:	71 05       	cpc	r23, r1
    22f4:	61 f4       	brne	.+24     	; 0x230e <pow+0x2c>
    22f6:	80 38       	cpi	r24, 0x80	; 128
    22f8:	bf e3       	ldi	r27, 0x3F	; 63
    22fa:	9b 07       	cpc	r25, r27
    22fc:	49 f1       	breq	.+82     	; 0x2350 <pow+0x6e>
    22fe:	68 94       	set
    2300:	90 38       	cpi	r25, 0x80	; 128
    2302:	81 05       	cpc	r24, r1
    2304:	61 f0       	breq	.+24     	; 0x231e <pow+0x3c>
    2306:	80 38       	cpi	r24, 0x80	; 128
    2308:	bf ef       	ldi	r27, 0xFF	; 255
    230a:	9b 07       	cpc	r25, r27
    230c:	41 f0       	breq	.+16     	; 0x231e <pow+0x3c>
    230e:	99 23       	and	r25, r25
    2310:	42 f5       	brpl	.+80     	; 0x2362 <pow+0x80>
    2312:	ff 3f       	cpi	r31, 0xFF	; 255
    2314:	e1 05       	cpc	r30, r1
    2316:	31 05       	cpc	r19, r1
    2318:	21 05       	cpc	r18, r1
    231a:	11 f1       	breq	.+68     	; 0x2360 <pow+0x7e>
    231c:	e8 94       	clt
    231e:	08 94       	sec
    2320:	e7 95       	ror	r30
    2322:	d9 01       	movw	r26, r18
    2324:	aa 23       	and	r26, r26
    2326:	29 f4       	brne	.+10     	; 0x2332 <pow+0x50>
    2328:	ab 2f       	mov	r26, r27
    232a:	be 2f       	mov	r27, r30
    232c:	f8 5f       	subi	r31, 0xF8	; 248
    232e:	d0 f3       	brcs	.-12     	; 0x2324 <pow+0x42>
    2330:	10 c0       	rjmp	.+32     	; 0x2352 <pow+0x70>
    2332:	ff 5f       	subi	r31, 0xFF	; 255
    2334:	70 f4       	brcc	.+28     	; 0x2352 <pow+0x70>
    2336:	a6 95       	lsr	r26
    2338:	e0 f7       	brcc	.-8      	; 0x2332 <pow+0x50>
    233a:	f7 39       	cpi	r31, 0x97	; 151
    233c:	50 f0       	brcs	.+20     	; 0x2352 <pow+0x70>
    233e:	19 f0       	breq	.+6      	; 0x2346 <pow+0x64>
    2340:	ff 3a       	cpi	r31, 0xAF	; 175
    2342:	38 f4       	brcc	.+14     	; 0x2352 <pow+0x70>
    2344:	9f 77       	andi	r25, 0x7F	; 127
    2346:	9f 93       	push	r25
    2348:	0c d0       	rcall	.+24     	; 0x2362 <pow+0x80>
    234a:	0f 90       	pop	r0
    234c:	07 fc       	sbrc	r0, 7
    234e:	90 58       	subi	r25, 0x80	; 128
    2350:	08 95       	ret
    2352:	3e f0       	brts	.+14     	; 0x2362 <pow+0x80>
    2354:	49 c0       	rjmp	.+146    	; 0x23e8 <__fp_nan>
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	80 e8       	ldi	r24, 0x80	; 128
    235c:	9f e3       	ldi	r25, 0x3F	; 63
    235e:	08 95       	ret
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	9f 77       	andi	r25, 0x7F	; 127
    2364:	5f 93       	push	r21
    2366:	4f 93       	push	r20
    2368:	3f 93       	push	r19
    236a:	2f 93       	push	r18
    236c:	d0 d0       	rcall	.+416    	; 0x250e <log>
    236e:	2f 91       	pop	r18
    2370:	3f 91       	pop	r19
    2372:	4f 91       	pop	r20
    2374:	5f 91       	pop	r21
    2376:	31 da       	rcall	.-2974   	; 0x17da <__mulsf3>
    2378:	05 c0       	rjmp	.+10     	; 0x2384 <exp>
    237a:	19 f4       	brne	.+6      	; 0x2382 <pow+0xa0>
    237c:	0e f0       	brts	.+2      	; 0x2380 <pow+0x9e>
    237e:	2e c0       	rjmp	.+92     	; 0x23dc <__fp_inf>
    2380:	7d c0       	rjmp	.+250    	; 0x247c <__fp_zero>
    2382:	32 c0       	rjmp	.+100    	; 0x23e8 <__fp_nan>

00002384 <exp>:
    2384:	61 d0       	rcall	.+194    	; 0x2448 <__fp_splitA>
    2386:	c8 f3       	brcs	.-14     	; 0x237a <pow+0x98>
    2388:	96 38       	cpi	r25, 0x86	; 134
    238a:	c0 f7       	brcc	.-16     	; 0x237c <pow+0x9a>
    238c:	07 f8       	bld	r0, 7
    238e:	0f 92       	push	r0
    2390:	e8 94       	clt
    2392:	2b e3       	ldi	r18, 0x3B	; 59
    2394:	3a ea       	ldi	r19, 0xAA	; 170
    2396:	48 eb       	ldi	r20, 0xB8	; 184
    2398:	5f e7       	ldi	r21, 0x7F	; 127
    239a:	38 d1       	rcall	.+624    	; 0x260c <__mulsf3_pse>
    239c:	0f 92       	push	r0
    239e:	0f 92       	push	r0
    23a0:	0f 92       	push	r0
    23a2:	4d b7       	in	r20, 0x3d	; 61
    23a4:	5e b7       	in	r21, 0x3e	; 62
    23a6:	0f 92       	push	r0
    23a8:	f2 d0       	rcall	.+484    	; 0x258e <modf>
    23aa:	e4 ee       	ldi	r30, 0xE4	; 228
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	1f d0       	rcall	.+62     	; 0x23ee <__fp_powser>
    23b0:	4f 91       	pop	r20
    23b2:	5f 91       	pop	r21
    23b4:	ef 91       	pop	r30
    23b6:	ff 91       	pop	r31
    23b8:	e5 95       	asr	r30
    23ba:	ee 1f       	adc	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	49 f0       	breq	.+18     	; 0x23d2 <exp+0x4e>
    23c0:	fe 57       	subi	r31, 0x7E	; 126
    23c2:	e0 68       	ori	r30, 0x80	; 128
    23c4:	44 27       	eor	r20, r20
    23c6:	ee 0f       	add	r30, r30
    23c8:	44 1f       	adc	r20, r20
    23ca:	fa 95       	dec	r31
    23cc:	e1 f7       	brne	.-8      	; 0x23c6 <exp+0x42>
    23ce:	41 95       	neg	r20
    23d0:	55 0b       	sbc	r21, r21
    23d2:	64 d0       	rcall	.+200    	; 0x249c <ldexp>
    23d4:	0f 90       	pop	r0
    23d6:	07 fe       	sbrs	r0, 7
    23d8:	58 c0       	rjmp	.+176    	; 0x248a <inverse>
    23da:	08 95       	ret

000023dc <__fp_inf>:
    23dc:	97 f9       	bld	r25, 7
    23de:	9f 67       	ori	r25, 0x7F	; 127
    23e0:	80 e8       	ldi	r24, 0x80	; 128
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	08 95       	ret

000023e8 <__fp_nan>:
    23e8:	9f ef       	ldi	r25, 0xFF	; 255
    23ea:	80 ec       	ldi	r24, 0xC0	; 192
    23ec:	08 95       	ret

000023ee <__fp_powser>:
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	1f 93       	push	r17
    23f4:	0f 93       	push	r16
    23f6:	ff 92       	push	r15
    23f8:	ef 92       	push	r14
    23fa:	df 92       	push	r13
    23fc:	7b 01       	movw	r14, r22
    23fe:	8c 01       	movw	r16, r24
    2400:	68 94       	set
    2402:	05 c0       	rjmp	.+10     	; 0x240e <__fp_powser+0x20>
    2404:	da 2e       	mov	r13, r26
    2406:	ef 01       	movw	r28, r30
    2408:	ff d0       	rcall	.+510    	; 0x2608 <__mulsf3x>
    240a:	fe 01       	movw	r30, r28
    240c:	e8 94       	clt
    240e:	a5 91       	lpm	r26, Z+
    2410:	25 91       	lpm	r18, Z+
    2412:	35 91       	lpm	r19, Z+
    2414:	45 91       	lpm	r20, Z+
    2416:	55 91       	lpm	r21, Z+
    2418:	ae f3       	brts	.-22     	; 0x2404 <__fp_powser+0x16>
    241a:	ef 01       	movw	r28, r30
    241c:	59 d1       	rcall	.+690    	; 0x26d0 <__addsf3x>
    241e:	fe 01       	movw	r30, r28
    2420:	97 01       	movw	r18, r14
    2422:	a8 01       	movw	r20, r16
    2424:	da 94       	dec	r13
    2426:	79 f7       	brne	.-34     	; 0x2406 <__fp_powser+0x18>
    2428:	df 90       	pop	r13
    242a:	ef 90       	pop	r14
    242c:	ff 90       	pop	r15
    242e:	0f 91       	pop	r16
    2430:	1f 91       	pop	r17
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <__fp_split3>:
    2438:	57 fd       	sbrc	r21, 7
    243a:	90 58       	subi	r25, 0x80	; 128
    243c:	44 0f       	add	r20, r20
    243e:	55 1f       	adc	r21, r21
    2440:	59 f0       	breq	.+22     	; 0x2458 <__fp_splitA+0x10>
    2442:	5f 3f       	cpi	r21, 0xFF	; 255
    2444:	71 f0       	breq	.+28     	; 0x2462 <__fp_splitA+0x1a>
    2446:	47 95       	ror	r20

00002448 <__fp_splitA>:
    2448:	88 0f       	add	r24, r24
    244a:	97 fb       	bst	r25, 7
    244c:	99 1f       	adc	r25, r25
    244e:	61 f0       	breq	.+24     	; 0x2468 <__fp_splitA+0x20>
    2450:	9f 3f       	cpi	r25, 0xFF	; 255
    2452:	79 f0       	breq	.+30     	; 0x2472 <__fp_splitA+0x2a>
    2454:	87 95       	ror	r24
    2456:	08 95       	ret
    2458:	12 16       	cp	r1, r18
    245a:	13 06       	cpc	r1, r19
    245c:	14 06       	cpc	r1, r20
    245e:	55 1f       	adc	r21, r21
    2460:	f2 cf       	rjmp	.-28     	; 0x2446 <__fp_split3+0xe>
    2462:	46 95       	lsr	r20
    2464:	f1 df       	rcall	.-30     	; 0x2448 <__fp_splitA>
    2466:	08 c0       	rjmp	.+16     	; 0x2478 <__fp_splitA+0x30>
    2468:	16 16       	cp	r1, r22
    246a:	17 06       	cpc	r1, r23
    246c:	18 06       	cpc	r1, r24
    246e:	99 1f       	adc	r25, r25
    2470:	f1 cf       	rjmp	.-30     	; 0x2454 <__fp_splitA+0xc>
    2472:	86 95       	lsr	r24
    2474:	71 05       	cpc	r23, r1
    2476:	61 05       	cpc	r22, r1
    2478:	08 94       	sec
    247a:	08 95       	ret

0000247c <__fp_zero>:
    247c:	e8 94       	clt

0000247e <__fp_szero>:
    247e:	bb 27       	eor	r27, r27
    2480:	66 27       	eor	r22, r22
    2482:	77 27       	eor	r23, r23
    2484:	cb 01       	movw	r24, r22
    2486:	97 f9       	bld	r25, 7
    2488:	08 95       	ret

0000248a <inverse>:
    248a:	9b 01       	movw	r18, r22
    248c:	ac 01       	movw	r20, r24
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	80 e8       	ldi	r24, 0x80	; 128
    2494:	9f e3       	ldi	r25, 0x3F	; 63
    2496:	9b ca       	rjmp	.-2762   	; 0x19ce <__divsf3>
    2498:	a1 cf       	rjmp	.-190    	; 0x23dc <__fp_inf>
    249a:	6d c1       	rjmp	.+730    	; 0x2776 <__fp_mpack>

0000249c <ldexp>:
    249c:	d5 df       	rcall	.-86     	; 0x2448 <__fp_splitA>
    249e:	e8 f3       	brcs	.-6      	; 0x249a <inverse+0x10>
    24a0:	99 23       	and	r25, r25
    24a2:	d9 f3       	breq	.-10     	; 0x249a <inverse+0x10>
    24a4:	94 0f       	add	r25, r20
    24a6:	51 1d       	adc	r21, r1
    24a8:	bb f3       	brvs	.-18     	; 0x2498 <inverse+0xe>
    24aa:	91 50       	subi	r25, 0x01	; 1
    24ac:	50 40       	sbci	r21, 0x00	; 0
    24ae:	94 f0       	brlt	.+36     	; 0x24d4 <ldexp+0x38>
    24b0:	59 f0       	breq	.+22     	; 0x24c8 <ldexp+0x2c>
    24b2:	88 23       	and	r24, r24
    24b4:	32 f0       	brmi	.+12     	; 0x24c2 <ldexp+0x26>
    24b6:	66 0f       	add	r22, r22
    24b8:	77 1f       	adc	r23, r23
    24ba:	88 1f       	adc	r24, r24
    24bc:	91 50       	subi	r25, 0x01	; 1
    24be:	50 40       	sbci	r21, 0x00	; 0
    24c0:	c1 f7       	brne	.-16     	; 0x24b2 <ldexp+0x16>
    24c2:	9e 3f       	cpi	r25, 0xFE	; 254
    24c4:	51 05       	cpc	r21, r1
    24c6:	44 f7       	brge	.-48     	; 0x2498 <inverse+0xe>
    24c8:	88 0f       	add	r24, r24
    24ca:	91 1d       	adc	r25, r1
    24cc:	96 95       	lsr	r25
    24ce:	87 95       	ror	r24
    24d0:	97 f9       	bld	r25, 7
    24d2:	08 95       	ret
    24d4:	5f 3f       	cpi	r21, 0xFF	; 255
    24d6:	ac f0       	brlt	.+42     	; 0x2502 <ldexp+0x66>
    24d8:	98 3e       	cpi	r25, 0xE8	; 232
    24da:	9c f0       	brlt	.+38     	; 0x2502 <ldexp+0x66>
    24dc:	bb 27       	eor	r27, r27
    24de:	86 95       	lsr	r24
    24e0:	77 95       	ror	r23
    24e2:	67 95       	ror	r22
    24e4:	b7 95       	ror	r27
    24e6:	08 f4       	brcc	.+2      	; 0x24ea <ldexp+0x4e>
    24e8:	b1 60       	ori	r27, 0x01	; 1
    24ea:	93 95       	inc	r25
    24ec:	c1 f7       	brne	.-16     	; 0x24de <ldexp+0x42>
    24ee:	bb 0f       	add	r27, r27
    24f0:	58 f7       	brcc	.-42     	; 0x24c8 <ldexp+0x2c>
    24f2:	11 f4       	brne	.+4      	; 0x24f8 <ldexp+0x5c>
    24f4:	60 ff       	sbrs	r22, 0
    24f6:	e8 cf       	rjmp	.-48     	; 0x24c8 <ldexp+0x2c>
    24f8:	6f 5f       	subi	r22, 0xFF	; 255
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	8f 4f       	sbci	r24, 0xFF	; 255
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	e3 cf       	rjmp	.-58     	; 0x24c8 <ldexp+0x2c>
    2502:	bd cf       	rjmp	.-134    	; 0x247e <__fp_szero>
    2504:	0e f0       	brts	.+2      	; 0x2508 <ldexp+0x6c>
    2506:	37 c1       	rjmp	.+622    	; 0x2776 <__fp_mpack>
    2508:	6f cf       	rjmp	.-290    	; 0x23e8 <__fp_nan>
    250a:	68 94       	set
    250c:	67 cf       	rjmp	.-306    	; 0x23dc <__fp_inf>

0000250e <log>:
    250e:	9c df       	rcall	.-200    	; 0x2448 <__fp_splitA>
    2510:	c8 f3       	brcs	.-14     	; 0x2504 <ldexp+0x68>
    2512:	99 23       	and	r25, r25
    2514:	d1 f3       	breq	.-12     	; 0x250a <ldexp+0x6e>
    2516:	c6 f3       	brts	.-16     	; 0x2508 <ldexp+0x6c>
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	1f 93       	push	r17
    251e:	0f 93       	push	r16
    2520:	ff 92       	push	r15
    2522:	c9 2f       	mov	r28, r25
    2524:	dd 27       	eor	r29, r29
    2526:	88 23       	and	r24, r24
    2528:	2a f0       	brmi	.+10     	; 0x2534 <log+0x26>
    252a:	21 97       	sbiw	r28, 0x01	; 1
    252c:	66 0f       	add	r22, r22
    252e:	77 1f       	adc	r23, r23
    2530:	88 1f       	adc	r24, r24
    2532:	da f7       	brpl	.-10     	; 0x252a <log+0x1c>
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f eb       	ldi	r21, 0xBF	; 191
    253c:	9f e3       	ldi	r25, 0x3F	; 63
    253e:	88 39       	cpi	r24, 0x98	; 152
    2540:	20 f0       	brcs	.+8      	; 0x254a <log+0x3c>
    2542:	80 3e       	cpi	r24, 0xE0	; 224
    2544:	30 f0       	brcs	.+12     	; 0x2552 <log+0x44>
    2546:	21 96       	adiw	r28, 0x01	; 1
    2548:	8f 77       	andi	r24, 0x7F	; 127
    254a:	1a d9       	rcall	.-3532   	; 0x1780 <__addsf3>
    254c:	ec e0       	ldi	r30, 0x0C	; 12
    254e:	f1 e0       	ldi	r31, 0x01	; 1
    2550:	03 c0       	rjmp	.+6      	; 0x2558 <log+0x4a>
    2552:	16 d9       	rcall	.-3540   	; 0x1780 <__addsf3>
    2554:	e9 e3       	ldi	r30, 0x39	; 57
    2556:	f1 e0       	ldi	r31, 0x01	; 1
    2558:	4a df       	rcall	.-364    	; 0x23ee <__fp_powser>
    255a:	8b 01       	movw	r16, r22
    255c:	be 01       	movw	r22, r28
    255e:	ec 01       	movw	r28, r24
    2560:	fb 2e       	mov	r15, r27
    2562:	6f 57       	subi	r22, 0x7F	; 127
    2564:	71 09       	sbc	r23, r1
    2566:	75 95       	asr	r23
    2568:	77 1f       	adc	r23, r23
    256a:	88 0b       	sbc	r24, r24
    256c:	99 0b       	sbc	r25, r25
    256e:	3b db       	rcall	.-2442   	; 0x1be6 <__floatsisf>
    2570:	28 e1       	ldi	r18, 0x18	; 24
    2572:	32 e7       	ldi	r19, 0x72	; 114
    2574:	41 e3       	ldi	r20, 0x31	; 49
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	47 d0       	rcall	.+142    	; 0x2608 <__mulsf3x>
    257a:	af 2d       	mov	r26, r15
    257c:	98 01       	movw	r18, r16
    257e:	ae 01       	movw	r20, r28
    2580:	ff 90       	pop	r15
    2582:	0f 91       	pop	r16
    2584:	1f 91       	pop	r17
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	a2 d0       	rcall	.+324    	; 0x26d0 <__addsf3x>
    258c:	10 c1       	rjmp	.+544    	; 0x27ae <__fp_round>

0000258e <modf>:
    258e:	fa 01       	movw	r30, r20
    2590:	dc 01       	movw	r26, r24
    2592:	aa 0f       	add	r26, r26
    2594:	bb 1f       	adc	r27, r27
    2596:	9b 01       	movw	r18, r22
    2598:	ac 01       	movw	r20, r24
    259a:	bf 57       	subi	r27, 0x7F	; 127
    259c:	28 f4       	brcc	.+10     	; 0x25a8 <modf+0x1a>
    259e:	22 27       	eor	r18, r18
    25a0:	33 27       	eor	r19, r19
    25a2:	44 27       	eor	r20, r20
    25a4:	50 78       	andi	r21, 0x80	; 128
    25a6:	1f c0       	rjmp	.+62     	; 0x25e6 <modf+0x58>
    25a8:	b7 51       	subi	r27, 0x17	; 23
    25aa:	88 f4       	brcc	.+34     	; 0x25ce <modf+0x40>
    25ac:	ab 2f       	mov	r26, r27
    25ae:	00 24       	eor	r0, r0
    25b0:	46 95       	lsr	r20
    25b2:	37 95       	ror	r19
    25b4:	27 95       	ror	r18
    25b6:	01 1c       	adc	r0, r1
    25b8:	a3 95       	inc	r26
    25ba:	d2 f3       	brmi	.-12     	; 0x25b0 <modf+0x22>
    25bc:	00 20       	and	r0, r0
    25be:	69 f0       	breq	.+26     	; 0x25da <modf+0x4c>
    25c0:	22 0f       	add	r18, r18
    25c2:	33 1f       	adc	r19, r19
    25c4:	44 1f       	adc	r20, r20
    25c6:	b3 95       	inc	r27
    25c8:	da f3       	brmi	.-10     	; 0x25c0 <modf+0x32>
    25ca:	0d d0       	rcall	.+26     	; 0x25e6 <modf+0x58>
    25cc:	a8 c8       	rjmp	.-3760   	; 0x171e <__subsf3>
    25ce:	61 30       	cpi	r22, 0x01	; 1
    25d0:	71 05       	cpc	r23, r1
    25d2:	a0 e8       	ldi	r26, 0x80	; 128
    25d4:	8a 07       	cpc	r24, r26
    25d6:	b9 46       	sbci	r27, 0x69	; 105
    25d8:	30 f4       	brcc	.+12     	; 0x25e6 <modf+0x58>
    25da:	9b 01       	movw	r18, r22
    25dc:	ac 01       	movw	r20, r24
    25de:	66 27       	eor	r22, r22
    25e0:	77 27       	eor	r23, r23
    25e2:	88 27       	eor	r24, r24
    25e4:	90 78       	andi	r25, 0x80	; 128
    25e6:	30 96       	adiw	r30, 0x00	; 0
    25e8:	21 f0       	breq	.+8      	; 0x25f2 <modf+0x64>
    25ea:	20 83       	st	Z, r18
    25ec:	31 83       	std	Z+1, r19	; 0x01
    25ee:	42 83       	std	Z+2, r20	; 0x02
    25f0:	53 83       	std	Z+3, r21	; 0x03
    25f2:	08 95       	ret
    25f4:	ce d0       	rcall	.+412    	; 0x2792 <__fp_pscA>
    25f6:	28 f0       	brcs	.+10     	; 0x2602 <modf+0x74>
    25f8:	d3 d0       	rcall	.+422    	; 0x27a0 <__fp_pscB>
    25fa:	18 f0       	brcs	.+6      	; 0x2602 <modf+0x74>
    25fc:	95 23       	and	r25, r21
    25fe:	09 f0       	breq	.+2      	; 0x2602 <modf+0x74>
    2600:	ed ce       	rjmp	.-550    	; 0x23dc <__fp_inf>
    2602:	f2 ce       	rjmp	.-540    	; 0x23e8 <__fp_nan>
    2604:	11 24       	eor	r1, r1
    2606:	3b cf       	rjmp	.-394    	; 0x247e <__fp_szero>

00002608 <__mulsf3x>:
    2608:	17 df       	rcall	.-466    	; 0x2438 <__fp_split3>
    260a:	a0 f3       	brcs	.-24     	; 0x25f4 <modf+0x66>

0000260c <__mulsf3_pse>:
    260c:	95 9f       	mul	r25, r21
    260e:	d1 f3       	breq	.-12     	; 0x2604 <modf+0x76>
    2610:	95 0f       	add	r25, r21
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	55 1f       	adc	r21, r21
    2616:	62 9f       	mul	r22, r18
    2618:	f0 01       	movw	r30, r0
    261a:	72 9f       	mul	r23, r18
    261c:	bb 27       	eor	r27, r27
    261e:	f0 0d       	add	r31, r0
    2620:	b1 1d       	adc	r27, r1
    2622:	63 9f       	mul	r22, r19
    2624:	aa 27       	eor	r26, r26
    2626:	f0 0d       	add	r31, r0
    2628:	b1 1d       	adc	r27, r1
    262a:	aa 1f       	adc	r26, r26
    262c:	64 9f       	mul	r22, r20
    262e:	66 27       	eor	r22, r22
    2630:	b0 0d       	add	r27, r0
    2632:	a1 1d       	adc	r26, r1
    2634:	66 1f       	adc	r22, r22
    2636:	82 9f       	mul	r24, r18
    2638:	22 27       	eor	r18, r18
    263a:	b0 0d       	add	r27, r0
    263c:	a1 1d       	adc	r26, r1
    263e:	62 1f       	adc	r22, r18
    2640:	73 9f       	mul	r23, r19
    2642:	b0 0d       	add	r27, r0
    2644:	a1 1d       	adc	r26, r1
    2646:	62 1f       	adc	r22, r18
    2648:	83 9f       	mul	r24, r19
    264a:	a0 0d       	add	r26, r0
    264c:	61 1d       	adc	r22, r1
    264e:	22 1f       	adc	r18, r18
    2650:	74 9f       	mul	r23, r20
    2652:	33 27       	eor	r19, r19
    2654:	a0 0d       	add	r26, r0
    2656:	61 1d       	adc	r22, r1
    2658:	23 1f       	adc	r18, r19
    265a:	84 9f       	mul	r24, r20
    265c:	60 0d       	add	r22, r0
    265e:	21 1d       	adc	r18, r1
    2660:	82 2f       	mov	r24, r18
    2662:	76 2f       	mov	r23, r22
    2664:	6a 2f       	mov	r22, r26
    2666:	11 24       	eor	r1, r1
    2668:	9f 57       	subi	r25, 0x7F	; 127
    266a:	50 40       	sbci	r21, 0x00	; 0
    266c:	8a f0       	brmi	.+34     	; 0x2690 <__mulsf3_pse+0x84>
    266e:	e1 f0       	breq	.+56     	; 0x26a8 <__mulsf3_pse+0x9c>
    2670:	88 23       	and	r24, r24
    2672:	4a f0       	brmi	.+18     	; 0x2686 <__mulsf3_pse+0x7a>
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	bb 1f       	adc	r27, r27
    267a:	66 1f       	adc	r22, r22
    267c:	77 1f       	adc	r23, r23
    267e:	88 1f       	adc	r24, r24
    2680:	91 50       	subi	r25, 0x01	; 1
    2682:	50 40       	sbci	r21, 0x00	; 0
    2684:	a9 f7       	brne	.-22     	; 0x2670 <__mulsf3_pse+0x64>
    2686:	9e 3f       	cpi	r25, 0xFE	; 254
    2688:	51 05       	cpc	r21, r1
    268a:	70 f0       	brcs	.+28     	; 0x26a8 <__mulsf3_pse+0x9c>
    268c:	a7 ce       	rjmp	.-690    	; 0x23dc <__fp_inf>
    268e:	f7 ce       	rjmp	.-530    	; 0x247e <__fp_szero>
    2690:	5f 3f       	cpi	r21, 0xFF	; 255
    2692:	ec f3       	brlt	.-6      	; 0x268e <__mulsf3_pse+0x82>
    2694:	98 3e       	cpi	r25, 0xE8	; 232
    2696:	dc f3       	brlt	.-10     	; 0x268e <__mulsf3_pse+0x82>
    2698:	86 95       	lsr	r24
    269a:	77 95       	ror	r23
    269c:	67 95       	ror	r22
    269e:	b7 95       	ror	r27
    26a0:	f7 95       	ror	r31
    26a2:	e7 95       	ror	r30
    26a4:	9f 5f       	subi	r25, 0xFF	; 255
    26a6:	c1 f7       	brne	.-16     	; 0x2698 <__mulsf3_pse+0x8c>
    26a8:	fe 2b       	or	r31, r30
    26aa:	88 0f       	add	r24, r24
    26ac:	91 1d       	adc	r25, r1
    26ae:	96 95       	lsr	r25
    26b0:	87 95       	ror	r24
    26b2:	97 f9       	bld	r25, 7
    26b4:	08 95       	ret
    26b6:	6d d0       	rcall	.+218    	; 0x2792 <__fp_pscA>
    26b8:	30 f0       	brcs	.+12     	; 0x26c6 <__mulsf3_pse+0xba>
    26ba:	72 d0       	rcall	.+228    	; 0x27a0 <__fp_pscB>
    26bc:	20 f0       	brcs	.+8      	; 0x26c6 <__mulsf3_pse+0xba>
    26be:	31 f4       	brne	.+12     	; 0x26cc <__mulsf3_pse+0xc0>
    26c0:	9f 3f       	cpi	r25, 0xFF	; 255
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <__mulsf3_pse+0xbc>
    26c4:	1e f4       	brtc	.+6      	; 0x26cc <__mulsf3_pse+0xc0>
    26c6:	90 ce       	rjmp	.-736    	; 0x23e8 <__fp_nan>
    26c8:	0e f4       	brtc	.+2      	; 0x26cc <__mulsf3_pse+0xc0>
    26ca:	e0 95       	com	r30
    26cc:	e7 fb       	bst	r30, 7
    26ce:	86 ce       	rjmp	.-756    	; 0x23dc <__fp_inf>

000026d0 <__addsf3x>:
    26d0:	e9 2f       	mov	r30, r25
    26d2:	b2 de       	rcall	.-668    	; 0x2438 <__fp_split3>
    26d4:	80 f3       	brcs	.-32     	; 0x26b6 <__mulsf3_pse+0xaa>
    26d6:	ba 17       	cp	r27, r26
    26d8:	62 07       	cpc	r22, r18
    26da:	73 07       	cpc	r23, r19
    26dc:	84 07       	cpc	r24, r20
    26de:	95 07       	cpc	r25, r21
    26e0:	18 f0       	brcs	.+6      	; 0x26e8 <__addsf3x+0x18>
    26e2:	71 f4       	brne	.+28     	; 0x2700 <__addsf3x+0x30>
    26e4:	9e f5       	brtc	.+102    	; 0x274c <__addsf3x+0x7c>
    26e6:	ca ce       	rjmp	.-620    	; 0x247c <__fp_zero>
    26e8:	0e f4       	brtc	.+2      	; 0x26ec <__addsf3x+0x1c>
    26ea:	e0 95       	com	r30
    26ec:	0b 2e       	mov	r0, r27
    26ee:	ba 2f       	mov	r27, r26
    26f0:	a0 2d       	mov	r26, r0
    26f2:	0b 01       	movw	r0, r22
    26f4:	b9 01       	movw	r22, r18
    26f6:	90 01       	movw	r18, r0
    26f8:	0c 01       	movw	r0, r24
    26fa:	ca 01       	movw	r24, r20
    26fc:	a0 01       	movw	r20, r0
    26fe:	11 24       	eor	r1, r1
    2700:	ff 27       	eor	r31, r31
    2702:	59 1b       	sub	r21, r25
    2704:	99 f0       	breq	.+38     	; 0x272c <__addsf3x+0x5c>
    2706:	59 3f       	cpi	r21, 0xF9	; 249
    2708:	50 f4       	brcc	.+20     	; 0x271e <__addsf3x+0x4e>
    270a:	50 3e       	cpi	r21, 0xE0	; 224
    270c:	68 f1       	brcs	.+90     	; 0x2768 <__addsf3x+0x98>
    270e:	1a 16       	cp	r1, r26
    2710:	f0 40       	sbci	r31, 0x00	; 0
    2712:	a2 2f       	mov	r26, r18
    2714:	23 2f       	mov	r18, r19
    2716:	34 2f       	mov	r19, r20
    2718:	44 27       	eor	r20, r20
    271a:	58 5f       	subi	r21, 0xF8	; 248
    271c:	f3 cf       	rjmp	.-26     	; 0x2704 <__addsf3x+0x34>
    271e:	46 95       	lsr	r20
    2720:	37 95       	ror	r19
    2722:	27 95       	ror	r18
    2724:	a7 95       	ror	r26
    2726:	f0 40       	sbci	r31, 0x00	; 0
    2728:	53 95       	inc	r21
    272a:	c9 f7       	brne	.-14     	; 0x271e <__addsf3x+0x4e>
    272c:	7e f4       	brtc	.+30     	; 0x274c <__addsf3x+0x7c>
    272e:	1f 16       	cp	r1, r31
    2730:	ba 0b       	sbc	r27, r26
    2732:	62 0b       	sbc	r22, r18
    2734:	73 0b       	sbc	r23, r19
    2736:	84 0b       	sbc	r24, r20
    2738:	ba f0       	brmi	.+46     	; 0x2768 <__addsf3x+0x98>
    273a:	91 50       	subi	r25, 0x01	; 1
    273c:	a1 f0       	breq	.+40     	; 0x2766 <__addsf3x+0x96>
    273e:	ff 0f       	add	r31, r31
    2740:	bb 1f       	adc	r27, r27
    2742:	66 1f       	adc	r22, r22
    2744:	77 1f       	adc	r23, r23
    2746:	88 1f       	adc	r24, r24
    2748:	c2 f7       	brpl	.-16     	; 0x273a <__addsf3x+0x6a>
    274a:	0e c0       	rjmp	.+28     	; 0x2768 <__addsf3x+0x98>
    274c:	ba 0f       	add	r27, r26
    274e:	62 1f       	adc	r22, r18
    2750:	73 1f       	adc	r23, r19
    2752:	84 1f       	adc	r24, r20
    2754:	48 f4       	brcc	.+18     	; 0x2768 <__addsf3x+0x98>
    2756:	87 95       	ror	r24
    2758:	77 95       	ror	r23
    275a:	67 95       	ror	r22
    275c:	b7 95       	ror	r27
    275e:	f7 95       	ror	r31
    2760:	9e 3f       	cpi	r25, 0xFE	; 254
    2762:	08 f0       	brcs	.+2      	; 0x2766 <__addsf3x+0x96>
    2764:	b3 cf       	rjmp	.-154    	; 0x26cc <__mulsf3_pse+0xc0>
    2766:	93 95       	inc	r25
    2768:	88 0f       	add	r24, r24
    276a:	08 f0       	brcs	.+2      	; 0x276e <__addsf3x+0x9e>
    276c:	99 27       	eor	r25, r25
    276e:	ee 0f       	add	r30, r30
    2770:	97 95       	ror	r25
    2772:	87 95       	ror	r24
    2774:	08 95       	ret

00002776 <__fp_mpack>:
    2776:	9f 3f       	cpi	r25, 0xFF	; 255
    2778:	31 f0       	breq	.+12     	; 0x2786 <__fp_mpack_finite+0xc>

0000277a <__fp_mpack_finite>:
    277a:	91 50       	subi	r25, 0x01	; 1
    277c:	20 f4       	brcc	.+8      	; 0x2786 <__fp_mpack_finite+0xc>
    277e:	87 95       	ror	r24
    2780:	77 95       	ror	r23
    2782:	67 95       	ror	r22
    2784:	b7 95       	ror	r27
    2786:	88 0f       	add	r24, r24
    2788:	91 1d       	adc	r25, r1
    278a:	96 95       	lsr	r25
    278c:	87 95       	ror	r24
    278e:	97 f9       	bld	r25, 7
    2790:	08 95       	ret

00002792 <__fp_pscA>:
    2792:	00 24       	eor	r0, r0
    2794:	0a 94       	dec	r0
    2796:	16 16       	cp	r1, r22
    2798:	17 06       	cpc	r1, r23
    279a:	18 06       	cpc	r1, r24
    279c:	09 06       	cpc	r0, r25
    279e:	08 95       	ret

000027a0 <__fp_pscB>:
    27a0:	00 24       	eor	r0, r0
    27a2:	0a 94       	dec	r0
    27a4:	12 16       	cp	r1, r18
    27a6:	13 06       	cpc	r1, r19
    27a8:	14 06       	cpc	r1, r20
    27aa:	05 06       	cpc	r0, r21
    27ac:	08 95       	ret

000027ae <__fp_round>:
    27ae:	09 2e       	mov	r0, r25
    27b0:	03 94       	inc	r0
    27b2:	00 0c       	add	r0, r0
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__fp_round+0xc>
    27b6:	88 23       	and	r24, r24
    27b8:	52 f0       	brmi	.+20     	; 0x27ce <__fp_round+0x20>
    27ba:	bb 0f       	add	r27, r27
    27bc:	40 f4       	brcc	.+16     	; 0x27ce <__fp_round+0x20>
    27be:	bf 2b       	or	r27, r31
    27c0:	11 f4       	brne	.+4      	; 0x27c6 <__fp_round+0x18>
    27c2:	60 ff       	sbrs	r22, 0
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <__fp_round+0x20>
    27c6:	6f 5f       	subi	r22, 0xFF	; 255
    27c8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ca:	8f 4f       	sbci	r24, 0xFF	; 255
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	08 95       	ret

000027d0 <_exit>:
    27d0:	f8 94       	cli

000027d2 <__stop_program>:
    27d2:	ff cf       	rjmp	.-2      	; 0x27d2 <__stop_program>
